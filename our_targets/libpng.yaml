"functions":
- "name": png_set_expand_16
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  "return_type": void
  "signature": "/* Expand to 16-bit channels, forces conversion of palette to RGB\
    \ and expansion\n * of a tRNS chunk if present.\n */\nPNG_EXPORT(221, void, png_set_expand_16,\
    \ (png_structrp png_ptr));"
- "name": png_set_gray_to_rgb
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  "return_type": void
  "signature": '/* Expand the grayscale to 24-bit RGB if necessary. */

    PNG_EXPORT(31, void, png_set_gray_to_rgb, (png_structrp png_ptr));'
- "name": png_set_rgb_to_gray_fixed
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": error_action
    "type": int
  - "name": red
    "type": int
  - "name": green
    "type": int
  "return_type": void
  "signature": "\nPNG_FIXED_EXPORT(33, void, png_set_rgb_to_gray_fixed, (png_structrp\
    \ png_ptr,\n    int error_action, png_fixed_point red, png_fixed_point green))\n\
    \nPNG_EXPORT(34, png_byte, png_get_rgb_to_gray_status, (png_const_structrp\n \
    \   png_ptr));"
- "name": png_set_rgb_to_gray
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": error_action
    "type": int
  - "name": red
    "type": double
  - "name": green
    "type": double
  "return_type": void
  "signature": "\nPNG_FP_EXPORT(32, void, png_set_rgb_to_gray, (png_structrp png_ptr,\n\
    \    int error_action, double red, double green))\nPNG_FIXED_EXPORT(33, void,\
    \ png_set_rgb_to_gray_fixed, (png_structrp png_ptr,\n    int error_action, png_fixed_point\
    \ red, png_fixed_point green))\n\nPNG_EXPORT(34, png_byte, png_get_rgb_to_gray_status,\
    \ (png_const_structrp\n    png_ptr));"
- "name": png_set_read_user_transform_fn
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": read_user_transform_fn
    "type": void (struct png_struct_def *, struct png_row_info_struct *, unsigned
      char *)
  "return_type": void
  "signature": "\nPNG_EXPORT(84, void, png_set_read_user_transform_fn, (png_structrp\
    \ png_ptr,\n    png_user_transform_ptr read_user_transform_fn));"
- "name": png_set_background_fixed
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": background_color
    "type": struct png_color_16_struct
  - "name": background_gamma_code
    "type": int
  - "name": need_expand
    "type": int
  - "name": background_gamma
    "type": int
  "return_type": void
  "signature": "\nPNG_FIXED_EXPORT(215, void, png_set_background_fixed, (png_structrp\
    \ png_ptr,\n    png_const_color_16p background_color, int background_gamma_code,\n\
    \    int need_expand, png_fixed_point background_gamma))\n#endif\n#ifdef PNG_READ_BACKGROUND_SUPPORTED\n\
    #  define PNG_BACKGROUND_GAMMA_UNKNOWN 0\n#  define PNG_BACKGROUND_GAMMA_SCREEN\
    \  1\n#  define PNG_BACKGROUND_GAMMA_FILE    2\n#  define PNG_BACKGROUND_GAMMA_UNIQUE\
    \  3\n#endif\n\n#ifdef PNG_READ_SCALE_16_TO_8_SUPPORTED\n/* Scale a 16-bit depth\
    \ file down to 8-bit, accurately. */\nPNG_EXPORT(229, void, png_set_scale_16,\
    \ (png_structrp png_ptr));"
- "name": png_set_background
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": background_color
    "type": struct png_color_16_struct
  - "name": background_gamma_code
    "type": int
  - "name": need_expand
    "type": int
  - "name": background_gamma
    "type": double
  "return_type": void
  "signature": "/* Handle alpha and tRNS by replacing with a background color.  Prior\
    \ to\n * libpng-1.5.4 this API must not be called before the PNG file header has\
    \ been\n * read.  Doing so will result in unexpected behavior and possible warnings\
    \ or\n * errors if the PNG file contains a bKGD chunk.\n */\nPNG_FP_EXPORT(47,\
    \ void, png_set_background, (png_structrp png_ptr,\n    png_const_color_16p background_color,\
    \ int background_gamma_code,\n    int need_expand, double background_gamma))\n\
    PNG_FIXED_EXPORT(215, void, png_set_background_fixed, (png_structrp png_ptr,\n\
    \    png_const_color_16p background_color, int background_gamma_code,\n    int\
    \ need_expand, png_fixed_point background_gamma))\n#endif\n#ifdef PNG_READ_BACKGROUND_SUPPORTED\n\
    #  define PNG_BACKGROUND_GAMMA_UNKNOWN 0\n#  define PNG_BACKGROUND_GAMMA_SCREEN\
    \  1\n#  define PNG_BACKGROUND_GAMMA_FILE    2\n#  define PNG_BACKGROUND_GAMMA_UNIQUE\
    \  3\n#endif\n\n#ifdef PNG_READ_SCALE_16_TO_8_SUPPORTED\n/* Scale a 16-bit depth\
    \ file down to 8-bit, accurately. */\nPNG_EXPORT(229, void, png_set_scale_16,\
    \ (png_structrp png_ptr));"
- "name": png_set_scale_16
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  "return_type": void
  "signature": '/* Scale a 16-bit depth file down to 8-bit, accurately. */

    PNG_EXPORT(229, void, png_set_scale_16, (png_structrp png_ptr));'
- "name": png_set_strip_16
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  "return_type": void
  "signature": '/* Name prior to 1.5.4 */

    /* Strip the second byte of information from a 16-bit depth file. */

    PNG_EXPORT(48, void, png_set_strip_16, (png_structrp png_ptr));'
- "name": png_set_strip_alpha
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  "return_type": void
  "signature": '

    PNG_EXPORT(36, void, png_set_strip_alpha, (png_structrp png_ptr));'
- "name": png_set_alpha_mode_fixed
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": mode
    "type": int
  - "name": output_gamma
    "type": int
  "return_type": void
  "signature": "\nPNG_FIXED_EXPORT(228, void, png_set_alpha_mode_fixed, (png_structrp\
    \ png_ptr,\n    int mode, png_fixed_point output_gamma))\n#endif\n\n#if defined(PNG_GAMMA_SUPPORTED)\
    \ || defined(PNG_READ_ALPHA_MODE_SUPPORTED)\n/* The output_gamma value is a screen\
    \ gamma in libpng terminology: it expresses\n * how to decode the output values,\
    \ not how they are encoded.\n */\n#define PNG_DEFAULT_sRGB -1       /* sRGB gamma\
    \ and color space */\n#define PNG_GAMMA_MAC_18 -2       /* Old Mac '1.8' gamma\
    \ and color space */\n#define PNG_GAMMA_sRGB   220000   /* Television standards--matches\
    \ sRGB gamma */\n#define PNG_GAMMA_LINEAR PNG_FP_1 /* Linear */\n#endif\n\n/*\
    \ The following are examples of calls to png_set_alpha_mode to achieve the\n *\
    \ required overall gamma correction and, where necessary, alpha\n * premultiplication.\n\
    \ *\n * png_set_alpha_mode(pp, PNG_ALPHA_PNG, PNG_DEFAULT_sRGB);"
- "name": png_set_crc_action
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": crit_action
    "type": int
  - "name": ancil_action
    "type": int
  "return_type": void
  "signature": "/* Set the libpng method of handling chunk CRC errors */\nPNG_EXPORT(66,\
    \ void, png_set_crc_action, (png_structrp png_ptr, int crit_action,\n    int ancil_action));"
- "name": png_set_alpha_mode
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": mode
    "type": int
  - "name": output_gamma
    "type": double
  "return_type": void
  "signature": "\nPNG_FP_EXPORT(227, void, png_set_alpha_mode, (png_structrp png_ptr,\
    \ int mode,\n    double output_gamma))\nPNG_FIXED_EXPORT(228, void, png_set_alpha_mode_fixed,\
    \ (png_structrp png_ptr,\n    int mode, png_fixed_point output_gamma))\n#endif\n\
    \n#if defined(PNG_GAMMA_SUPPORTED) || defined(PNG_READ_ALPHA_MODE_SUPPORTED)\n\
    /* The output_gamma value is a screen gamma in libpng terminology: it expresses\n\
    \ * how to decode the output values, not how they are encoded.\n */\n#define PNG_DEFAULT_sRGB\
    \ -1       /* sRGB gamma and color space */\n#define PNG_GAMMA_MAC_18 -2     \
    \  /* Old Mac '1.8' gamma and color space */\n#define PNG_GAMMA_sRGB   220000\
    \   /* Television standards--matches sRGB gamma */\n#define PNG_GAMMA_LINEAR PNG_FP_1\
    \ /* Linear */\n#endif\n\n/* The following are examples of calls to png_set_alpha_mode\
    \ to achieve the\n * required overall gamma correction and, where necessary, alpha\n\
    \ * premultiplication.\n *\n * png_set_alpha_mode(pp, PNG_ALPHA_PNG, PNG_DEFAULT_sRGB);"
- "name": png_set_quantize
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": palette
    "type": struct png_color_struct
  - "name": num_palette
    "type": int
  - "name": maximum_colors
    "type": int
  - "name": histogram
    "type": unsigned short
  - "name": full_quantize
    "type": int
  "return_type": void
  "signature": "/* Turn on quantizing, and reduce the palette to the number of colors\n\
    \ * available.\n */\nPNG_EXPORT(49, void, png_set_quantize, (png_structrp png_ptr,\n\
    \    png_colorp palette, int num_palette, int maximum_colors,\n    png_const_uint_16p\
    \ histogram, int full_quantize));"
- "name": png_set_gamma_fixed
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": scrn_gamma
    "type": int
  - "name": file_gamma
    "type": int
  "return_type": void
  "signature": "\nPNG_FIXED_EXPORT(208, void, png_set_gamma_fixed, (png_structrp png_ptr,\n\
    \    png_fixed_point screen_gamma, png_fixed_point override_file_gamma))\n#endif\n\
    \n#ifdef PNG_WRITE_FLUSH_SUPPORTED\n/* Set how many lines between output flushes\
    \ - 0 for no flushing */\nPNG_EXPORT(51, void, png_set_flush, (png_structrp png_ptr,\
    \ int nrows));"
- "name": png_set_gamma
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": scrn_gamma
    "type": double
  - "name": file_gamma
    "type": double
  "return_type": void
  "signature": "/* Handle gamma correction. Screen_gamma=(display_exponent).\n * NOTE:\
    \ this API simply sets the screen and file gamma values. It will\n * therefore\
    \ override the value for gamma in a PNG file if it is called after\n * the file\
    \ header has been read - use with care  - call before reading the PNG\n * file\
    \ for best results!\n *\n * These routines accept the same gamma values as png_set_alpha_mode\
    \ (described\n * above).  The PNG_GAMMA_ defines and PNG_DEFAULT_sRGB can be passed\
    \ to either\n * API (floating point or fixed.)  Notice, however, that the 'file_gamma'\
    \ value\n * is the inverse of a 'screen gamma' value.\n */\nPNG_FP_EXPORT(50,\
    \ void, png_set_gamma, (png_structrp png_ptr,\n    double screen_gamma, double\
    \ override_file_gamma))\nPNG_FIXED_EXPORT(208, void, png_set_gamma_fixed, (png_structrp\
    \ png_ptr,\n    png_fixed_point screen_gamma, png_fixed_point override_file_gamma))\n\
    #endif\n\n#ifdef PNG_WRITE_FLUSH_SUPPORTED\n/* Set how many lines between output\
    \ flushes - 0 for no flushing */\nPNG_EXPORT(51, void, png_set_flush, (png_structrp\
    \ png_ptr, int nrows));"
- "name": png_set_expand
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  "return_type": void
  "signature": '/* Expand data to 24-bit RGB, or 8-bit grayscale, with alpha if available.
    */

    PNG_EXPORT(26, void, png_set_expand, (png_structrp png_ptr));'
- "name": png_set_palette_to_rgb
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  "return_type": void
  "signature": '

    PNG_EXPORT(28, void, png_set_palette_to_rgb, (png_structrp png_ptr));'
- "name": png_set_expand_gray_1_2_4_to_8
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  "return_type": void
  "signature": '

    PNG_EXPORT(27, void, png_set_expand_gray_1_2_4_to_8, (png_structrp png_ptr));'
- "name": png_set_tRNS_to_alpha
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  "return_type": void
  "signature": '

    PNG_EXPORT(29, void, png_set_tRNS_to_alpha, (png_structrp png_ptr));'
- "name": png_warning
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": warning_message
    "type": char
  "return_type": void
  "signature": "/* Non-fatal error in libpng.  Can continue, but may have a problem.\
    \ */\nPNG_EXPORT(105, void, png_warning, (png_const_structrp png_ptr,\n    png_const_charp\
    \ warning_message));"
- "name": png_benign_error
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": error_message
    "type": char
  "return_type": void
  "signature": "/* Benign error in libpng.  Can continue, but may have a problem.\n\
    \ * User can choose whether to handle as a fatal error or as a warning. */\nPNG_EXPORT(107,\
    \ void, png_benign_error, (png_const_structrp png_ptr,\n    png_const_charp warning_message));"
- "name": png_error
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": error_message
    "type": char
  "return_type": void
  "signature": "/* Fatal error in PNG image of libpng - can't continue */\nPNG_EXPORTA(102,\
    \ void, png_error, (png_const_structrp png_ptr,\n    png_const_charp error_message),\
    \ PNG_NORETURN);"
- "name": png_chunk_error
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": error_message
    "type": char
  "return_type": void
  "signature": "/* The same, but the chunk name is prepended to the error string.\
    \ */\nPNG_EXPORTA(103, void, png_chunk_error, (png_const_structrp png_ptr,\n \
    \   png_const_charp error_message), PNG_NORETURN);"
- "name": png_chunk_warning
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": warning_message
    "type": char
  "return_type": void
  "signature": "/* Non-fatal error in libpng, chunk name is prepended to message.\
    \ */\nPNG_EXPORT(106, void, png_chunk_warning, (png_const_structrp png_ptr,\n\
    \    png_const_charp warning_message));"
- "name": png_chunk_benign_error
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": error_message
    "type": char
  "return_type": void
  "signature": "/* Same, chunk name is prepended to message (only during read) */\n\
    PNG_EXPORT(108, void, png_chunk_benign_error, (png_const_structrp png_ptr,\n \
    \   png_const_charp warning_message));"
- "name": png_set_longjmp_fn
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": longjmp_fn
    "type": void (struct __jmp_buf_tag *, int)
  - "name": jmp_buf_size
    "type": unsigned long
  "return_type": struct __jmp_buf_tag[1]
  "signature": "/* This function returns the jmp_buf built in to *png_ptr.  It must\
    \ be\n * supplied with an appropriate 'longjmp' function to use on that jmp_buf\n\
    \ * unless the default error function is overridden in which case NULL is\n *\
    \ acceptable.  The size of the jmp_buf is checked against the actual size\n *\
    \ allocated by the library - the call will return NULL on a mismatch\n * indicating\
    \ an ABI mismatch.\n */\nPNG_EXPORT(8, jmp_buf*, png_set_longjmp_fn, (png_structrp\
    \ png_ptr,\n    png_longjmp_ptr longjmp_fn, size_t jmp_buf_size));"
- "name": png_longjmp
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": val
    "type": int
  "return_type": void
  "signature": "/* This function should be used by libpng applications in place of\n\
    \ * longjmp(png_ptr->jmpbuf, val).  If longjmp_fn() has been set, it\n * will\
    \ use it; otherwise it will call PNG_ABORT().  This function was\n * added in\
    \ libpng-1.5.0.\n */\nPNG_EXPORTA(9, void, png_longjmp, (png_const_structrp png_ptr,\
    \ int val),\n    PNG_NORETURN);"
- "name": png_set_error_fn
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": error_ptr
    "type": void
  - "name": error_fn
    "type": void (struct png_struct_def *, const char *)
  - "name": warning_fn
    "type": void (struct png_struct_def *, const char *)
  "return_type": void
  "signature": "\nPNG_EXPORT(75, void, png_set_error_fn, (png_structrp png_ptr,\n\
    \    png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warning_fn));"
- "name": png_get_error_ptr
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  "return_type": void
  "signature": '/* Return the user pointer associated with the error functions */

    PNG_EXPORT(76, png_voidp, png_get_error_ptr, (png_const_structrp png_ptr));'
- "name": png_create_info_struct
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  "return_type": struct png_info_def
  "signature": "/* Allocate and initialize the info structure */\nPNG_EXPORTA(18,\
    \ png_infop, png_create_info_struct, (png_const_structrp png_ptr),\n    PNG_ALLOCATED);"
- "name": png_set_option
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": option
    "type": int
  - "name": onoff
    "type": int
  "return_type": int
  "signature": "\nPNG_EXPORT(244, int, png_set_option, (png_structrp png_ptr, int\
    \ option,\n   int onoff));"
- "name": png_destroy_info_struct
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr_ptr
    "type": struct png_info_def
  "return_type": void
  "signature": "/* Free any memory associated with the png_info_struct */\nPNG_EXPORT(63,\
    \ void, png_destroy_info_struct, (png_const_structrp png_ptr,\n    png_infopp\
    \ info_ptr_ptr));"
- "name": png_image_free
  "params":
  - "name": image
    "type": png_image
  "return_type": void
  "signature": '

    PNG_EXPORT(238, void, png_image_free, (png_imagep image));'
- "name": png_info_init_3
  "params":
  - "name": ptr_ptr
    "type": struct png_info_def
  - "name": png_info_struct_size
    "type": unsigned long
  "return_type": void
  "signature": "/* DEPRECATED: this function allowed init structures to be created\
    \ using the\n * default allocation method (typically malloc).  Use is deprecated\
    \ in 1.6.0 and\n * the API will be removed in the future.\n */\nPNG_EXPORTA(19,\
    \ void, png_info_init_3, (png_infopp info_ptr,\n    size_t png_info_struct_size),\
    \ PNG_DEPRECATED);"
- "name": png_data_freer
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": freer
    "type": int
  - "name": mask
    "type": unsigned int
  "return_type": void
  "signature": "/* Reassign the responsibility for freeing existing data, whether\
    \ allocated\n * by libpng or by the application; this works on the png_info structure\
    \ passed\n * in, without changing the state for other png_info structures.\n */\n\
    PNG_EXPORT(99, void, png_data_freer, (png_const_structrp png_ptr,\n    png_inforp\
    \ info_ptr, int freer, png_uint_32 mask));"
- "name": png_free_data
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": mask
    "type": unsigned int
  - "name": num
    "type": int
  "return_type": void
  "signature": "/* Free data that was allocated internally */\nPNG_EXPORT(98, void,\
    \ png_free_data, (png_const_structrp png_ptr,\n    png_inforp info_ptr, png_uint_32\
    \ free_me, int num));"
- "name": png_set_sig_bytes
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": num_bytes
    "type": int
  "return_type": void
  "signature": "/* Tell lib we have already handled the first <num_bytes> magic bytes.\n\
    \ * Handling more than 8 bytes from the beginning of the file is an error.\n */\n\
    PNG_EXPORT(2, void, png_set_sig_bytes, (png_structrp png_ptr, int num_bytes));"
- "name": png_get_io_ptr
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  "return_type": void
  "signature": '/* Return the user pointer associated with the I/O functions */

    PNG_EXPORT(79, png_voidp, png_get_io_ptr, (png_const_structrp png_ptr));'
- "name": png_init_io
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": fp
    "type": struct _IO_FILE
  "return_type": void
  "signature": '/* Initialize the input/output for the PNG file to the default functions.
    */

    PNG_EXPORT(74, void, png_init_io, (png_structrp png_ptr, FILE *fp));'
- "name": png_save_int_32
  "params":
  - "name": buf
    "type": unsigned char
  - "name": i
    "type": int
  "return_type": void
  "signature": '

    PNG_EXPORT(206, void, png_save_int_32, (png_bytep buf, png_int_32 i));'
- "name": png_convert_to_rfc1123_buffer
  "params":
  - "name": out
    "type": char
  - "name": ptime
    "type": struct png_time_struct
  "return_type": int
  "signature": "\nPNG_EXPORT(241, int, png_convert_to_rfc1123_buffer, (char out[29],\n\
    \    png_const_timep ptime));"
- "name": png_convert_to_rfc1123
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": ptime
    "type": struct png_time_struct
  "return_type": char
  "signature": "/* To do: remove this from libpng17 (and from libpng17/png.c and pngstruct.h)\
    \ */\nPNG_EXPORTA(23, png_const_charp, png_convert_to_rfc1123, (png_structrp png_ptr,\n\
    \    png_const_timep ptime),PNG_DEPRECATED);"
- "name": png_sig_cmp
  "params":
  - "name": sig
    "type": unsigned char
  - "name": start
    "type": unsigned long
  - "name": num_to_check
    "type": unsigned long
  "return_type": int
  "signature": "/* Check sig[start] through sig[start + num_to_check - 1] to see if\
    \ it's a\n * PNG file.  Returns zero if the supplied bytes match the 8-byte PNG\n\
    \ * signature, and non-zero otherwise.  Having num_to_check == 0 or\n * start\
    \ > 7 will always fail (i.e. return non-zero).\n */\nPNG_EXPORT(3, int, png_sig_cmp,\
    \ (png_const_bytep sig, size_t start,\n    size_t num_to_check));"
- "name": png_get_copyright
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  "return_type": char
  "signature": "\nPNG_EXPORT(180, png_const_charp, png_get_copyright,\n    (png_const_structrp\
    \ png_ptr));"
- "name": png_get_libpng_ver
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  "return_type": char
  "signature": "\nPNG_EXPORT(183, png_const_charp, png_get_libpng_ver,\n    (png_const_structrp\
    \ png_ptr));"
- "name": png_get_header_ver
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  "return_type": char
  "signature": "\nPNG_EXPORT(181, png_const_charp, png_get_header_ver,\n    (png_const_structrp\
    \ png_ptr));"
- "name": png_get_header_version
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  "return_type": char
  "signature": "\nPNG_EXPORT(182, png_const_charp, png_get_header_version,\n    (png_const_structrp\
    \ png_ptr));"
- "name": png_build_grayscale_palette
  "params":
  - "name": bit_depth
    "type": int
  - "name": palette
    "type": struct png_color_struct
  "return_type": void
  "signature": "\nPNG_EXPORT(35, void, png_build_grayscale_palette, (int bit_depth,\n\
    \    png_colorp palette));"
- "name": png_handle_as_unknown
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": chunk_name
    "type": unsigned char
  "return_type": int
  "signature": "/* The \"keep\" PNG_HANDLE_CHUNK_ parameter for the specified chunk\
    \ is returned;\n * the result is therefore true (non-zero) if special handling\
    \ is required,\n * false for the default handling.\n */\nPNG_EXPORT(173, int,\
    \ png_handle_as_unknown, (png_const_structrp png_ptr,\n    png_const_bytep chunk_name));"
- "name": png_reset_zstream
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  "return_type": int
  "signature": '/* Reset the compression stream */

    PNG_EXPORTA(10, int, png_reset_zstream, (png_structrp png_ptr), PNG_DEPRECATED);'
- "name": png_access_version_number
  "params": []
  "return_type": unsigned int
  "signature": '/* Returns the version number of the library */

    PNG_EXPORT(1, png_uint_32, png_access_version_number, (void));'
- "name": png_set_write_fn
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": io_ptr
    "type": void
  - "name": write_data_fn
    "type": void (struct png_struct_def *, unsigned char *, unsigned long)
  - "name": output_flush_fn
    "type": void (struct png_struct_def *)
  "return_type": void
  "signature": "/* Replace the default data output functions with a user supplied\
    \ one(s).\n * If buffered output is not used, then output_flush_fn can be set\
    \ to NULL.\n * If PNG_WRITE_FLUSH_SUPPORTED is not defined at libpng compile time\n\
    \ * output_flush_fn will be ignored (and thus can be NULL).\n * It is probably\
    \ a mistake to use NULL for output_flush_fn if\n * write_data_fn is not also NULL\
    \ unless you have built libpng with\n * PNG_WRITE_FLUSH_SUPPORTED undefined, because\
    \ in this case libpng's\n * default flush function, which uses the standard *FILE\
    \ structure, will\n * be used.\n */\nPNG_EXPORT(77, void, png_set_write_fn, (png_structrp\
    \ png_ptr, png_voidp io_ptr,\n    png_rw_ptr write_data_fn, png_flush_ptr output_flush_fn));"
- "name": png_image_begin_read_from_stdio
  "params":
  - "name": image
    "type": png_image
  - "name": file
    "type": struct _IO_FILE
  "return_type": int
  "signature": "\nPNG_EXPORT(235, int, png_image_begin_read_from_stdio, (png_imagep\
    \ image,\n   FILE *file));"
- "name": png_image_begin_read_from_file
  "params":
  - "name": image
    "type": png_image
  - "name": file_name
    "type": char
  "return_type": int
  "signature": "\nPNG_EXPORT(234, int, png_image_begin_read_from_file, (png_imagep\
    \ image,\n   const char *file_name));"
- "name": png_image_begin_read_from_memory
  "params":
  - "name": image
    "type": png_image
  - "name": memory
    "type": void
  - "name": size
    "type": unsigned long
  "return_type": int
  "signature": "\nPNG_EXPORT(236, int, png_image_begin_read_from_memory, (png_imagep\
    \ image,\n   png_const_voidp memory, size_t size));"
- "name": png_read_update_info
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  "return_type": void
  "signature": "/* Optional call to update the users info structure */\nPNG_EXPORT(54,\
    \ void, png_read_update_info, (png_structrp png_ptr,\n    png_inforp info_ptr));"
- "name": png_start_read_image
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  "return_type": void
  "signature": '/* Optional update palette with requested transformations */

    PNG_EXPORT(53, void, png_start_read_image, (png_structrp png_ptr));'
- "name": png_create_read_struct
  "params":
  - "name": user_png_ver
    "type": char
  - "name": error_ptr
    "type": void
  - "name": error_fn
    "type": void (struct png_struct_def *, const char *)
  - "name": warn_fn
    "type": void (struct png_struct_def *, const char *)
  "return_type": struct png_struct_def
  "signature": "/* Allocate and initialize png_ptr struct for reading, and any other\
    \ memory. */\nPNG_EXPORTA(4, png_structp, png_create_read_struct,\n    (png_const_charp\
    \ user_png_ver, png_voidp error_ptr,\n    png_error_ptr error_fn, png_error_ptr\
    \ warn_fn),\n    PNG_ALLOCATED);"
- "name": png_read_row
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": row
    "type": unsigned char
  - "name": dsp_row
    "type": unsigned char
  "return_type": void
  "signature": "/* Read a row of data. */\nPNG_EXPORT(56, void, png_read_row, (png_structrp\
    \ png_ptr, png_bytep row,\n    png_bytep display_row));"
- "name": png_image_finish_read
  "params":
  - "name": image
    "type": png_image
  - "name": background
    "type": struct png_color_struct
  - "name": buffer
    "type": void
  - "name": row_stride
    "type": int
  - "name": colormap
    "type": void
  "return_type": int
  "signature": "\nPNG_EXPORT(237, int, png_image_finish_read, (png_imagep image,\n\
    \   png_const_colorp background, void *buffer, png_int_32 row_stride,\n   void\
    \ *colormap));"
- "name": png_create_read_struct_2
  "params":
  - "name": user_png_ver
    "type": char
  - "name": error_ptr
    "type": void
  - "name": error_fn
    "type": void (struct png_struct_def *, const char *)
  - "name": warn_fn
    "type": void (struct png_struct_def *, const char *)
  - "name": mem_ptr
    "type": void
  - "name": malloc_fn
    "type": void *(struct png_struct_def *, unsigned long)
  - "name": free_fn
    "type": void (struct png_struct_def *, void *)
  "return_type": struct png_struct_def
  "signature": "\nPNG_EXPORTA(11, png_structp, png_create_read_struct_2,\n    (png_const_charp\
    \ user_png_ver, png_voidp error_ptr, png_error_ptr error_fn,\n    png_error_ptr\
    \ warn_fn,\n    png_voidp mem_ptr, png_malloc_ptr malloc_fn, png_free_ptr free_fn),\n\
    \    PNG_ALLOCATED);"
- "name": png_read_rows
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": row
    "type": unsigned char
  - "name": display_row
    "type": unsigned char
  - "name": num_rows
    "type": unsigned int
  "return_type": void
  "signature": "/* Read one or more rows of image data. */\nPNG_EXPORT(55, void, png_read_rows,\
    \ (png_structrp png_ptr, png_bytepp row,\n    png_bytepp display_row, png_uint_32\
    \ num_rows));"
- "name": png_read_image
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": image
    "type": unsigned char
  "return_type": void
  "signature": '/* Read the whole image into memory at once. */

    PNG_EXPORT(57, void, png_read_image, (png_structrp png_ptr, png_bytepp image));'
- "name": png_read_end
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  "return_type": void
  "signature": '/* Read the end of the PNG file. */

    PNG_EXPORT(62, void, png_read_end, (png_structrp png_ptr, png_inforp info_ptr));'
- "name": png_destroy_read_struct
  "params":
  - "name": png_ptr_ptr
    "type": struct png_struct_def
  - "name": info_ptr_ptr
    "type": struct png_info_def
  - "name": end_info_ptr_ptr
    "type": struct png_info_def
  "return_type": void
  "signature": "/* Free any memory associated with the png_struct and the png_info_structs\
    \ */\nPNG_EXPORT(64, void, png_destroy_read_struct, (png_structpp png_ptr_ptr,\n\
    \    png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr));"
- "name": png_set_read_status_fn
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": read_row_fn
    "type": void (struct png_struct_def *, unsigned int, int)
  "return_type": void
  "signature": "\nPNG_EXPORT(80, void, png_set_read_status_fn, (png_structrp png_ptr,\n\
    \    png_read_status_ptr read_row_fn));"
- "name": png_read_png
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": transforms
    "type": int
  - "name": params
    "type": void
  "return_type": void
  "signature": "\nPNG_EXPORT(178, void, png_read_png, (png_structrp png_ptr, png_inforp\
    \ info_ptr,\n    int transforms, png_voidp params));"
- "name": png_read_info
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  "return_type": void
  "signature": "/* Read the information before the actual image data. */\nPNG_EXPORT(22,\
    \ void, png_read_info,\n    (png_structrp png_ptr, png_inforp info_ptr));"
- "name": png_malloc
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": size
    "type": unsigned long
  "return_type": void
  "signature": "\nPNG_EXPORTA(94, png_voidp, png_malloc, (png_const_structrp png_ptr,\n\
    \    png_alloc_size_t size), PNG_ALLOCATED);"
- "name": png_malloc_default
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": size
    "type": unsigned long
  "return_type": void
  "signature": "\nPNG_EXPORTA(100, png_voidp, png_malloc_default, (png_const_structrp\
    \ png_ptr,\n    png_alloc_size_t size), PNG_ALLOCATED PNG_DEPRECATED);"
- "name": png_malloc_warn
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": size
    "type": unsigned long
  "return_type": void
  "signature": "/* Added at libpng version 1.2.4 */\nPNG_EXPORTA(96, png_voidp, png_malloc_warn,\
    \ (png_const_structrp png_ptr,\n    png_alloc_size_t size), PNG_ALLOCATED);"
- "name": png_free
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": ptr
    "type": void
  "return_type": void
  "signature": '/* Frees a pointer allocated by png_malloc() */

    PNG_EXPORT(97, void, png_free, (png_const_structrp png_ptr, png_voidp ptr));'
- "name": png_free_default
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": ptr
    "type": void
  "return_type": void
  "signature": "\nPNG_EXPORTA(101, void, png_free_default, (png_const_structrp png_ptr,\n\
    \    png_voidp ptr), PNG_DEPRECATED);"
- "name": png_set_mem_fn
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": mem_ptr
    "type": void
  - "name": malloc_fn
    "type": void *(struct png_struct_def *, unsigned long)
  - "name": free_fn
    "type": void (struct png_struct_def *, void *)
  "return_type": void
  "signature": "/* Replace the default memory allocation functions with user supplied\
    \ one(s). */\nPNG_EXPORT(82, void, png_set_mem_fn, (png_structrp png_ptr, png_voidp\
    \ mem_ptr,\n    png_malloc_ptr malloc_fn, png_free_ptr free_fn));"
- "name": png_get_mem_ptr
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  "return_type": void
  "signature": '/* Return the user pointer associated with the memory functions */

    PNG_EXPORT(83, png_voidp, png_get_mem_ptr, (png_const_structrp png_ptr));'
- "name": png_calloc
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": size
    "type": unsigned long
  "return_type": void
  "signature": "/* Added at libpng version 1.4.0 */\nPNG_EXPORTA(95, png_voidp, png_calloc,\
    \ (png_const_structrp png_ptr,\n    png_alloc_size_t size), PNG_ALLOCATED);"
- "name": png_write_chunk_start
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": chunk_string
    "type": unsigned char
  - "name": length
    "type": unsigned int
  "return_type": void
  "signature": "/* Write the start of a PNG chunk - length and chunk name. */\nPNG_EXPORT(15,\
    \ void, png_write_chunk_start, (png_structrp png_ptr,\n    png_const_bytep chunk_name,\
    \ png_uint_32 length));"
- "name": png_write_chunk_data
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": data
    "type": unsigned char
  - "name": length
    "type": unsigned long
  "return_type": void
  "signature": "/* Write the data of a PNG chunk started with png_write_chunk_start().\
    \ */\nPNG_EXPORT(16, void, png_write_chunk_data, (png_structrp png_ptr,\n    png_const_bytep\
    \ data, size_t length));"
- "name": png_write_chunk_end
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  "return_type": void
  "signature": '/* Finish a chunk started with png_write_chunk_start() (includes CRC).
    */

    PNG_EXPORT(17, void, png_write_chunk_end, (png_structrp png_ptr));'
- "name": png_write_chunk
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": chunk_string
    "type": unsigned char
  - "name": data
    "type": unsigned char
  - "name": length
    "type": unsigned long
  "return_type": void
  "signature": "/* Write a PNG chunk - size, type, (optional) data, CRC. */\nPNG_EXPORT(14,\
    \ void, png_write_chunk, (png_structrp png_ptr, png_const_bytep\n    chunk_name,\
    \ png_const_bytep data, size_t length));"
- "name": png_save_uint_32
  "params":
  - "name": buf
    "type": unsigned char
  - "name": i
    "type": unsigned int
  "return_type": void
  "signature": '

    PNG_EXPORT(205, void, png_save_uint_32, (png_bytep buf, png_uint_32 i));'
- "name": png_save_uint_16
  "params":
  - "name": buf
    "type": unsigned char
  - "name": i
    "type": unsigned int
  "return_type": void
  "signature": '

    PNG_EXPORT(207, void, png_save_uint_16, (png_bytep buf, unsigned int i));'
- "name": png_write_sig
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  "return_type": void
  "signature": '/* Write the PNG file signature. */

    PNG_EXPORT(13, void, png_write_sig, (png_structrp png_ptr));'
- "name": png_process_data
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": buffer
    "type": unsigned char
  - "name": buffer_size
    "type": unsigned long
  "return_type": void
  "signature": "/* Function to be called when data becomes available */\nPNG_EXPORT(92,\
    \ void, png_process_data, (png_structrp png_ptr,\n    png_inforp info_ptr, png_bytep\
    \ buffer, size_t buffer_size));"
- "name": png_process_data_pause
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": save
    "type": int
  "return_type": unsigned long
  "signature": "/* A function which may be called *only* within png_process_data to\
    \ stop the\n * processing of any more data.  The function returns the number of\
    \ bytes\n * remaining, excluding any that libpng has cached internally.  A subsequent\n\
    \ * call to png_process_data must supply these bytes again.  If the argument\n\
    \ * 'save' is set to true the routine will first save all the pending data and\n\
    \ * will always return 0.\n */\nPNG_EXPORT(219, size_t, png_process_data_pause,\
    \ (png_structrp, int save));"
- "name": png_progressive_combine_row
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": old_row
    "type": unsigned char
  - "name": new_row
    "type": unsigned char
  "return_type": void
  "signature": "/* Function that combines rows.  'new_row' is a flag that should come\
    \ from\n * the callback and be non-NULL if anything needs to be done; the library\n\
    \ * stores its own version of the new data internally and ignores the passed\n\
    \ * in value.\n */\nPNG_EXPORT(93, void, png_progressive_combine_row, (png_const_structrp\
    \ png_ptr,\n    png_bytep old_row, png_const_bytep new_row));"
- "name": png_set_progressive_read_fn
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": progressive_ptr
    "type": void
  - "name": info_fn
    "type": void (struct png_struct_def *, struct png_info_def *)
  - "name": row_fn
    "type": void (struct png_struct_def *, unsigned char *, unsigned int, int)
  - "name": end_fn
    "type": void (struct png_struct_def *, struct png_info_def *)
  "return_type": void
  "signature": "/* Sets the function callbacks for the push reader, and a pointer\
    \ to a\n * user-defined structure available to the callback functions.\n */\n\
    PNG_EXPORT(90, void, png_set_progressive_read_fn, (png_structrp png_ptr,\n   \
    \ png_voidp progressive_ptr, png_progressive_info_ptr info_fn,\n    png_progressive_row_ptr\
    \ row_fn, png_progressive_end_ptr end_fn));"
- "name": png_process_data_skip
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  "return_type": unsigned int
  "signature": "/* A function which may be called *only* outside (after) a call to\n\
    \ * png_process_data.  It returns the number of bytes of data to skip in the\n\
    \ * input.  Normally it will return 0, but if it returns a non-zero value the\n\
    \ * application must skip than number of bytes of input data and pass the\n *\
    \ following data to the next call to png_process_data.\n */\nPNG_EXPORT(220, png_uint_32,\
    \ png_process_data_skip, (png_structrp));"
- "name": png_get_progressive_ptr
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  "return_type": void
  "signature": "/* Returns the user pointer associated with the push read functions\
    \ */\nPNG_EXPORT(91, png_voidp, png_get_progressive_ptr,\n    (png_const_structrp\
    \ png_ptr));"
- "name": png_set_read_fn
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": io_ptr
    "type": void
  - "name": read_data_fn
    "type": void (struct png_struct_def *, unsigned char *, unsigned long)
  "return_type": void
  "signature": "/* Replace the default data input function with a user supplied one.\
    \ */\nPNG_EXPORT(78, void, png_set_read_fn, (png_structrp png_ptr, png_voidp io_ptr,\n\
    \    png_rw_ptr read_data_fn));"
- "name": png_set_filler
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": filler
    "type": unsigned int
  - "name": filler_loc
    "type": int
  "return_type": void
  "signature": "/* Add a filler byte to 8-bit or 16-bit Gray or 24-bit or 48-bit RGB\
    \ images. */\nPNG_EXPORT(39, void, png_set_filler, (png_structrp png_ptr, png_uint_32\
    \ filler,\n    int flags));"
- "name": png_set_add_alpha
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": filler
    "type": unsigned int
  - "name": filler_loc
    "type": int
  "return_type": void
  "signature": "/* Add an alpha byte to 8-bit or 16-bit Gray or 24-bit or 48-bit RGB\
    \ images. */\nPNG_EXPORT(40, void, png_set_add_alpha, (png_structrp png_ptr,\n\
    \    png_uint_32 filler, int flags));"
- "name": png_set_bgr
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  "return_type": void
  "signature": '/* Use blue, green, red order for pixels. */

    PNG_EXPORT(30, void, png_set_bgr, (png_structrp png_ptr));'
- "name": png_set_swap_alpha
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  "return_type": void
  "signature": '

    PNG_EXPORT(37, void, png_set_swap_alpha, (png_structrp png_ptr));'
- "name": png_set_invert_alpha
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  "return_type": void
  "signature": '

    PNG_EXPORT(38, void, png_set_invert_alpha, (png_structrp png_ptr));'
- "name": png_set_invert_mono
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  "return_type": void
  "signature": '/* Invert monochrome files */

    PNG_EXPORT(46, void, png_set_invert_mono, (png_structrp png_ptr));'
- "name": png_set_swap
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  "return_type": void
  "signature": '/* Swap bytes in 16-bit depth files. */

    PNG_EXPORT(41, void, png_set_swap, (png_structrp png_ptr));'
- "name": png_set_packing
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  "return_type": void
  "signature": '/* Use 1 byte per pixel in 1, 2, or 4-bit depth files. */

    PNG_EXPORT(42, void, png_set_packing, (png_structrp png_ptr));'
- "name": png_set_packswap
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  "return_type": void
  "signature": '/* Swap packing order of pixels in bytes. */

    PNG_EXPORT(43, void, png_set_packswap, (png_structrp png_ptr));'
- "name": png_set_user_transform_info
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": user_transform_ptr
    "type": void
  - "name": user_transform_depth
    "type": int
  - "name": user_transform_channels
    "type": int
  "return_type": void
  "signature": "\nPNG_EXPORT(86, void, png_set_user_transform_info, (png_structrp\
    \ png_ptr,\n    png_voidp user_transform_ptr, int user_transform_depth,\n    int\
    \ user_transform_channels));"
- "name": png_get_user_transform_ptr
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  "return_type": void
  "signature": "/* Return the user pointer associated with the user transform functions\
    \ */\nPNG_EXPORT(87, png_voidp, png_get_user_transform_ptr,\n    (png_const_structrp\
    \ png_ptr));"
- "name": png_set_shift
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": true_bits
    "type": struct png_color_8_struct
  "return_type": void
  "signature": "/* Converts files to legal bit depths. */\nPNG_EXPORT(44, void, png_set_shift,\
    \ (png_structrp png_ptr, png_const_color_8p\n    true_bits));"
- "name": png_get_current_row_number
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  "return_type": unsigned int
  "signature": "/* Return information about the row currently being processed.  Note\
    \ that these\n * APIs do not fail but will return unexpected results if called\
    \ outside a user\n * transform callback.  Also note that when transforming an\
    \ interlaced image the\n * row number is the row number within the sub-image of\
    \ the interlace pass, so\n * the value will increase to the height of the sub-image\
    \ (not the full image)\n * then reset to 0 for the next pass.\n *\n * Use PNG_ROW_FROM_PASS_ROW(row,\
    \ pass) and PNG_COL_FROM_PASS_COL(col, pass) to\n * find the output pixel (x,y)\
    \ given an interlaced sub-image pixel\n * (row,col,pass).  (See below for these\
    \ macros.)\n */\nPNG_EXPORT(217, png_uint_32, png_get_current_row_number, (png_const_structrp));"
- "name": png_get_current_pass_number
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  "return_type": unsigned char
  "signature": '

    PNG_EXPORT(218, png_byte, png_get_current_pass_number, (png_const_structrp));'
- "name": png_set_interlace_handling
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  "return_type": int
  "signature": "/* Have the code handle the interlacing.  Returns the number of passes.\n\
    \ * MUST be called before png_read_update_info or png_start_read_image,\n * otherwise\
    \ it will not have the desired effect.  Note that it is still\n * necessary to\
    \ call png_read_row or png_read_rows png_get_image_height\n * times for each pass.\n\
    */\nPNG_EXPORT(45, int, png_set_interlace_handling, (png_structrp png_ptr));"
- "name": png_destroy_write_struct
  "params":
  - "name": png_ptr_ptr
    "type": struct png_struct_def
  - "name": info_ptr_ptr
    "type": struct png_info_def
  "return_type": void
  "signature": "/* Free any memory associated with the png_struct and the png_info_structs\
    \ */\nPNG_EXPORT(65, void, png_destroy_write_struct, (png_structpp png_ptr_ptr,\n\
    \    png_infopp info_ptr_ptr));"
- "name": png_set_filter
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": method
    "type": int
  - "name": filters
    "type": int
  "return_type": void
  "signature": "/* Set the filtering method(s) used by libpng.  Currently, the only\
    \ valid\n * value for \"method\" is 0.\n */\nPNG_EXPORT(67, void, png_set_filter,\
    \ (png_structrp png_ptr, int method,\n    int filters));"
- "name": png_set_filter_heuristics
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": heuristic_method
    "type": int
  - "name": num_weights
    "type": int
  - "name": filter_weights
    "type": double
  - "name": filter_costs
    "type": double
  "return_type": void
  "signature": "/* DEPRECATED */\nPNG_FP_EXPORT(68, void, png_set_filter_heuristics,\
    \ (png_structrp png_ptr,\n    int heuristic_method, int num_weights, png_const_doublep\
    \ filter_weights,\n    png_const_doublep filter_costs))\nPNG_FIXED_EXPORT(209,\
    \ void, png_set_filter_heuristics_fixed,\n    (png_structrp png_ptr, int heuristic_method,\
    \ int num_weights,\n    png_const_fixed_point_p filter_weights,\n    png_const_fixed_point_p\
    \ filter_costs))\n#endif /* WRITE_WEIGHTED_FILTER */\n\n/* The following are no\
    \ longer used and will be removed from libpng-1.7: */\n#define PNG_FILTER_HEURISTIC_DEFAULT\
    \    0  /* Currently \"UNWEIGHTED\" */\n#define PNG_FILTER_HEURISTIC_UNWEIGHTED\
    \ 1  /* Used by libpng < 0.95 */\n#define PNG_FILTER_HEURISTIC_WEIGHTED   2  /*\
    \ Experimental feature */\n#define PNG_FILTER_HEURISTIC_LAST       3  /* Not a\
    \ valid value */\n\n/* Set the library compression level.  Currently, valid values\
    \ range from\n * 0 - 9, corresponding directly to the zlib compression levels\
    \ 0 - 9\n * (0 - no compression, 9 - \"maximal\" compression).  Note that tests\
    \ have\n * shown that zlib compression levels 3-6 usually perform as well as level\
    \ 9\n * for PNG images, and do considerably fewer calculations.  In the future,\n\
    \ * these values may not correspond directly to the zlib compression levels.\n\
    \ */\n#ifdef PNG_WRITE_CUSTOMIZE_COMPRESSION_SUPPORTED\nPNG_EXPORT(69, void, png_set_compression_level,\
    \ (png_structrp png_ptr,\n    int level));"
- "name": png_set_filter_heuristics_fixed
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": heuristic_method
    "type": int
  - "name": num_weights
    "type": int
  - "name": filter_weights
    "type": int
  - "name": filter_costs
    "type": int
  "return_type": void
  "signature": "\nPNG_FIXED_EXPORT(209, void, png_set_filter_heuristics_fixed,\n \
    \   (png_structrp png_ptr, int heuristic_method, int num_weights,\n    png_const_fixed_point_p\
    \ filter_weights,\n    png_const_fixed_point_p filter_costs))\n#endif /* WRITE_WEIGHTED_FILTER\
    \ */\n\n/* The following are no longer used and will be removed from libpng-1.7:\
    \ */\n#define PNG_FILTER_HEURISTIC_DEFAULT    0  /* Currently \"UNWEIGHTED\" */\n\
    #define PNG_FILTER_HEURISTIC_UNWEIGHTED 1  /* Used by libpng < 0.95 */\n#define\
    \ PNG_FILTER_HEURISTIC_WEIGHTED   2  /* Experimental feature */\n#define PNG_FILTER_HEURISTIC_LAST\
    \       3  /* Not a valid value */\n\n/* Set the library compression level.  Currently,\
    \ valid values range from\n * 0 - 9, corresponding directly to the zlib compression\
    \ levels 0 - 9\n * (0 - no compression, 9 - \"maximal\" compression).  Note that\
    \ tests have\n * shown that zlib compression levels 3-6 usually perform as well\
    \ as level 9\n * for PNG images, and do considerably fewer calculations.  In the\
    \ future,\n * these values may not correspond directly to the zlib compression\
    \ levels.\n */\n#ifdef PNG_WRITE_CUSTOMIZE_COMPRESSION_SUPPORTED\nPNG_EXPORT(69,\
    \ void, png_set_compression_level, (png_structrp png_ptr,\n    int level));"
- "name": png_set_compression_level
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": level
    "type": int
  "return_type": void
  "signature": "\nPNG_EXPORT(69, void, png_set_compression_level, (png_structrp png_ptr,\n\
    \    int level));"
- "name": png_set_compression_mem_level
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": mem_level
    "type": int
  "return_type": void
  "signature": "\nPNG_EXPORT(70, void, png_set_compression_mem_level, (png_structrp\
    \ png_ptr,\n    int mem_level));"
- "name": png_set_compression_strategy
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": strategy
    "type": int
  "return_type": void
  "signature": "\nPNG_EXPORT(71, void, png_set_compression_strategy, (png_structrp\
    \ png_ptr,\n    int strategy));"
- "name": png_set_compression_window_bits
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": window_bits
    "type": int
  "return_type": void
  "signature": "/* If PNG_WRITE_OPTIMIZE_CMF_SUPPORTED is defined, libpng will use\
    \ a\n * smaller value of window_bits if it can do so safely.\n */\nPNG_EXPORT(72,\
    \ void, png_set_compression_window_bits, (png_structrp png_ptr,\n    int window_bits));"
- "name": png_set_compression_method
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": method
    "type": int
  "return_type": void
  "signature": "\nPNG_EXPORT(73, void, png_set_compression_method, (png_structrp png_ptr,\n\
    \    int method));"
- "name": png_set_text_compression_level
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": level
    "type": int
  "return_type": void
  "signature": "/* Also set zlib parameters for compressing non-IDAT chunks */\nPNG_EXPORT(222,\
    \ void, png_set_text_compression_level, (png_structrp png_ptr,\n    int level));"
- "name": png_set_text_compression_mem_level
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": mem_level
    "type": int
  "return_type": void
  "signature": "\nPNG_EXPORT(223, void, png_set_text_compression_mem_level, (png_structrp\
    \ png_ptr,\n    int mem_level));"
- "name": png_set_text_compression_strategy
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": strategy
    "type": int
  "return_type": void
  "signature": "\nPNG_EXPORT(224, void, png_set_text_compression_strategy, (png_structrp\
    \ png_ptr,\n    int strategy));"
- "name": png_set_text_compression_window_bits
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": window_bits
    "type": int
  "return_type": void
  "signature": "/* If PNG_WRITE_OPTIMIZE_CMF_SUPPORTED is defined, libpng will use\
    \ a\n * smaller value of window_bits if it can do so safely.\n */\nPNG_EXPORT(225,\
    \ void, png_set_text_compression_window_bits,\n    (png_structrp png_ptr, int\
    \ window_bits));"
- "name": png_set_text_compression_method
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": method
    "type": int
  "return_type": void
  "signature": "\nPNG_EXPORT(226, void, png_set_text_compression_method, (png_structrp\
    \ png_ptr,\n    int method));"
- "name": png_set_write_status_fn
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": write_row_fn
    "type": void (struct png_struct_def *, unsigned int, int)
  "return_type": void
  "signature": "\nPNG_EXPORT(81, void, png_set_write_status_fn, (png_structrp png_ptr,\n\
    \    png_write_status_ptr write_row_fn));"
- "name": png_set_write_user_transform_fn
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": write_user_transform_fn
    "type": void (struct png_struct_def *, struct png_row_info_struct *, unsigned
      char *)
  "return_type": void
  "signature": "\nPNG_EXPORT(85, void, png_set_write_user_transform_fn, (png_structrp\
    \ png_ptr,\n    png_user_transform_ptr write_user_transform_fn));"
- "name": png_write_png
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": transforms
    "type": int
  - "name": params
    "type": void
  "return_type": void
  "signature": "\nPNG_EXPORT(179, void, png_write_png, (png_structrp png_ptr, png_inforp\
    \ info_ptr,\n    int transforms, png_voidp params));"
- "name": png_write_info
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  "return_type": void
  "signature": "\nPNG_EXPORT(21, void, png_write_info,\n    (png_structrp png_ptr,\
    \ png_const_inforp info_ptr));"
- "name": png_image_write_to_memory
  "params":
  - "name": image
    "type": png_image
  - "name": memory
    "type": void
  - "name": memory_bytes
    "type": unsigned long
  - "name": convert_to_8bit
    "type": int
  - "name": buffer
    "type": void
  - "name": row_stride
    "type": int
  - "name": colormap
    "type": void
  "return_type": int
  "signature": "\nPNG_EXPORT(245, int, png_image_write_to_memory, (png_imagep image,\
    \ void *memory,\n   png_alloc_size_t * PNG_RESTRICT memory_bytes, int convert_to_8_bit,\n\
    \   const void *buffer, png_int_32 row_stride, const void *colormap));"
- "name": png_image_write_to_stdio
  "params":
  - "name": image
    "type": png_image
  - "name": file
    "type": struct _IO_FILE
  - "name": convert_to_8bit
    "type": int
  - "name": buffer
    "type": void
  - "name": row_stride
    "type": int
  - "name": colormap
    "type": void
  "return_type": int
  "signature": "\nPNG_EXPORT(240, int, png_image_write_to_stdio, (png_imagep image,\
    \ FILE *file,\n   int convert_to_8_bit, const void *buffer, png_int_32 row_stride,\n\
    \   const void *colormap));"
- "name": png_image_write_to_file
  "params":
  - "name": image
    "type": png_image
  - "name": file_name
    "type": char
  - "name": convert_to_8bit
    "type": int
  - "name": buffer
    "type": void
  - "name": row_stride
    "type": int
  - "name": colormap
    "type": void
  "return_type": int
  "signature": "\nPNG_EXPORT(239, int, png_image_write_to_file, (png_imagep image,\n\
    \   const char *file, int convert_to_8bit, const void *buffer,\n   png_int_32\
    \ row_stride, const void *colormap));"
- "name": png_write_end
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  "return_type": void
  "signature": "/* Write the end of the PNG file. */\nPNG_EXPORT(61, void, png_write_end,\
    \ (png_structrp png_ptr,\n    png_inforp info_ptr));"
- "name": png_convert_from_struct_tm
  "params":
  - "name": ptime
    "type": struct png_time_struct
  - "name": ttime
    "type": struct tm
  "return_type": void
  "signature": "/* Convert from a struct tm to png_time */\nPNG_EXPORT(24, void, png_convert_from_struct_tm,\
    \ (png_timep ptime,\n    const struct tm * ttime));"
- "name": png_convert_from_time_t
  "params":
  - "name": ptime
    "type": struct png_time_struct
  - "name": ttime
    "type": long
  "return_type": void
  "signature": '/* Convert from time_t to png_time.  Uses gmtime() */

    PNG_EXPORT(25, void, png_convert_from_time_t, (png_timep ptime, time_t ttime));'
- "name": png_create_write_struct
  "params":
  - "name": user_png_ver
    "type": char
  - "name": error_ptr
    "type": void
  - "name": error_fn
    "type": void (struct png_struct_def *, const char *)
  - "name": warn_fn
    "type": void (struct png_struct_def *, const char *)
  "return_type": struct png_struct_def
  "signature": "/* Allocate and initialize png_ptr struct for writing, and any other\
    \ memory */\nPNG_EXPORTA(5, png_structp, png_create_write_struct,\n    (png_const_charp\
    \ user_png_ver, png_voidp error_ptr, png_error_ptr error_fn,\n    png_error_ptr\
    \ warn_fn),\n    PNG_ALLOCATED);"
- "name": png_create_write_struct_2
  "params":
  - "name": user_png_ver
    "type": char
  - "name": error_ptr
    "type": void
  - "name": error_fn
    "type": void (struct png_struct_def *, const char *)
  - "name": warn_fn
    "type": void (struct png_struct_def *, const char *)
  - "name": mem_ptr
    "type": void
  - "name": malloc_fn
    "type": void *(struct png_struct_def *, unsigned long)
  - "name": free_fn
    "type": void (struct png_struct_def *, void *)
  "return_type": struct png_struct_def
  "signature": "\nPNG_EXPORTA(12, png_structp, png_create_write_struct_2,\n    (png_const_charp\
    \ user_png_ver, png_voidp error_ptr, png_error_ptr error_fn,\n    png_error_ptr\
    \ warn_fn,\n    png_voidp mem_ptr, png_malloc_ptr malloc_fn, png_free_ptr free_fn),\n\
    \    PNG_ALLOCATED);"
- "name": png_write_rows
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": row
    "type": unsigned char
  - "name": num_rows
    "type": unsigned int
  "return_type": void
  "signature": "/* Write a few rows of image data: (*row) is not written; however,\
    \ the type\n * is declared as writeable to maintain compatibility with previous\
    \ versions\n * of libpng and to allow the 'display_row' array from read_rows to\
    \ be passed\n * unchanged to write_rows.\n */\nPNG_EXPORT(59, void, png_write_rows,\
    \ (png_structrp png_ptr, png_bytepp row,\n    png_uint_32 num_rows));"
- "name": png_write_image
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": image
    "type": unsigned char
  "return_type": void
  "signature": '/* Write the image data */

    PNG_EXPORT(60, void, png_write_image, (png_structrp png_ptr, png_bytepp image));'
- "name": png_write_row
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": row
    "type": unsigned char
  "return_type": void
  "signature": "/* Write a row of image data */\nPNG_EXPORT(58, void, png_write_row,\
    \ (png_structrp png_ptr,\n    png_const_bytep row));"
- "name": png_write_info_before_PLTE
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  "return_type": void
  "signature": "/* Writes all the PNG information before the image. */\nPNG_EXPORT(20,\
    \ void, png_write_info_before_PLTE,\n    (png_structrp png_ptr, png_const_inforp\
    \ info_ptr));"
- "name": png_set_flush
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": nrows
    "type": int
  "return_type": void
  "signature": '/* Set how many lines between output flushes - 0 for no flushing */

    PNG_EXPORT(51, void, png_set_flush, (png_structrp png_ptr, int nrows));'
- "name": png_write_flush
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  "return_type": void
  "signature": '/* Flush the current PNG output buffer */

    PNG_EXPORT(52, void, png_write_flush, (png_structrp png_ptr));'
- "name": png_get_pCAL
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": purpose
    "type": char
  - "name": X0
    "type": int
  - "name": X1
    "type": int
  - "name": type
    "type": int
  - "name": nparams
    "type": int
  - "name": units
    "type": char
  - "name": params
    "type": char
  "return_type": unsigned int
  "signature": "\nPNG_EXPORT(147, png_uint_32, png_get_pCAL, (png_const_structrp png_ptr,\n\
    \    png_inforp info_ptr, png_charp *purpose, png_int_32 *X0,\n    png_int_32\
    \ *X1, int *type, int *nparams, png_charp *units,\n    png_charpp *params));"
- "name": png_get_sCAL_fixed
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": unit
    "type": int
  - "name": width
    "type": int
  - "name": height
    "type": int
  "return_type": unsigned int
  "signature": "/* NOTE: this API is currently implemented using floating point arithmetic,\n\
    \ * consequently it can only be used on systems with floating point support.\n\
    \ * In any case the range of values supported by png_fixed_point is small and\
    \ it\n * is highly recommended that png_get_sCAL_s be used instead.\n */\nPNG_FIXED_EXPORT(214,\
    \ png_uint_32, png_get_sCAL_fixed,\n    (png_const_structrp png_ptr, png_const_inforp\
    \ info_ptr, int *unit,\n    png_fixed_point *width, png_fixed_point *height))\n\
    #endif\nPNG_EXPORT(169, png_uint_32, png_get_sCAL_s,\n    (png_const_structrp\
    \ png_ptr, png_const_inforp info_ptr, int *unit,\n    png_charpp swidth, png_charpp\
    \ sheight));"
- "name": png_get_sCAL
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": unit
    "type": int
  - "name": width
    "type": double
  - "name": height
    "type": double
  "return_type": unsigned int
  "signature": "\nPNG_FP_EXPORT(168, png_uint_32, png_get_sCAL, (png_const_structrp\
    \ png_ptr,\n    png_const_inforp info_ptr, int *unit, double *width, double *height))\n\
    #if defined(PNG_FLOATING_ARITHMETIC_SUPPORTED) || \\\n   defined(PNG_FLOATING_POINT_SUPPORTED)\n\
    /* NOTE: this API is currently implemented using floating point arithmetic,\n\
    \ * consequently it can only be used on systems with floating point support.\n\
    \ * In any case the range of values supported by png_fixed_point is small and\
    \ it\n * is highly recommended that png_get_sCAL_s be used instead.\n */\nPNG_FIXED_EXPORT(214,\
    \ png_uint_32, png_get_sCAL_fixed,\n    (png_const_structrp png_ptr, png_const_inforp\
    \ info_ptr, int *unit,\n    png_fixed_point *width, png_fixed_point *height))\n\
    #endif\nPNG_EXPORT(169, png_uint_32, png_get_sCAL_s,\n    (png_const_structrp\
    \ png_ptr, png_const_inforp info_ptr, int *unit,\n    png_charpp swidth, png_charpp\
    \ sheight));"
- "name": png_get_sCAL_s
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": unit
    "type": int
  - "name": width
    "type": char
  - "name": height
    "type": char
  "return_type": unsigned int
  "signature": "\nPNG_EXPORT(169, png_uint_32, png_get_sCAL_s,\n    (png_const_structrp\
    \ png_ptr, png_const_inforp info_ptr, int *unit,\n    png_charpp swidth, png_charpp\
    \ sheight));"
- "name": png_get_interlace_type
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  "return_type": unsigned char
  "signature": "/* Returns image interlace_type. */\nPNG_EXPORT(120, png_byte, png_get_interlace_type,\
    \ (png_const_structrp png_ptr,\n    png_const_inforp info_ptr));"
- "name": png_get_pHYs
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": res_x
    "type": unsigned int
  - "name": res_y
    "type": unsigned int
  - "name": unit_type
    "type": int
  "return_type": unsigned int
  "signature": "\nPNG_EXPORT(149, png_uint_32, png_get_pHYs, (png_const_structrp png_ptr,\n\
    \    png_const_inforp info_ptr, png_uint_32 *res_x, png_uint_32 *res_y,\n    int\
    \ *unit_type));"
- "name": png_get_PLTE
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": palette
    "type": struct png_color_struct
  - "name": num_palette
    "type": int
  "return_type": unsigned int
  "signature": "\nPNG_EXPORT(151, png_uint_32, png_get_PLTE, (png_const_structrp png_ptr,\n\
    \   png_inforp info_ptr, png_colorp *palette, int *num_palette));"
- "name": png_get_sBIT
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": sig_bit
    "type": struct png_color_8_struct
  "return_type": unsigned int
  "signature": "\nPNG_EXPORT(153, png_uint_32, png_get_sBIT, (png_const_structrp png_ptr,\n\
    \    png_inforp info_ptr, png_color_8p *sig_bit));"
- "name": png_get_text
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": text_ptr
    "type": struct png_text_struct
  - "name": num_text
    "type": int
  "return_type": int
  "signature": "/* png_get_text also returns the number of text chunks in *num_text\
    \ */\nPNG_EXPORT(162, int, png_get_text, (png_const_structrp png_ptr,\n    png_inforp\
    \ info_ptr, png_textp *text_ptr, int *num_text));"
- "name": png_get_compression_type
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  "return_type": unsigned char
  "signature": "/* Returns image compression_type. */\nPNG_EXPORT(121, png_byte, png_get_compression_type,\
    \ (png_const_structrp png_ptr,\n    png_const_inforp info_ptr));"
- "name": png_get_tIME
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": mod_time
    "type": struct png_time_struct
  "return_type": unsigned int
  "signature": "\nPNG_EXPORT(164, png_uint_32, png_get_tIME, (png_const_structrp png_ptr,\n\
    \    png_inforp info_ptr, png_timep *mod_time));"
- "name": png_get_tRNS
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": trans_alpha
    "type": unsigned char
  - "name": num_trans
    "type": int
  - "name": trans_color
    "type": struct png_color_16_struct
  "return_type": unsigned int
  "signature": "\nPNG_EXPORT(166, png_uint_32, png_get_tRNS, (png_const_structrp png_ptr,\n\
    \    png_inforp info_ptr, png_bytep *trans_alpha, int *num_trans,\n    png_color_16p\
    \ *trans_color));"
- "name": png_get_x_pixels_per_meter
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  "return_type": unsigned int
  "signature": "\nPNG_EXPORT(123, png_uint_32, png_get_x_pixels_per_meter,\n    (png_const_structrp\
    \ png_ptr, png_const_inforp info_ptr));"
- "name": png_get_unknown_chunks
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": unknowns
    "type": struct png_unknown_chunk_t
  "return_type": int
  "signature": "\nPNG_EXPORT(176, int, png_get_unknown_chunks, (png_const_structrp\
    \ png_ptr,\n    png_inforp info_ptr, png_unknown_chunkpp entries));"
- "name": png_get_rgb_to_gray_status
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  "return_type": unsigned char
  "signature": "\nPNG_EXPORT(34, png_byte, png_get_rgb_to_gray_status, (png_const_structrp\n\
    \    png_ptr));"
- "name": png_get_user_chunk_ptr
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  "return_type": void
  "signature": '

    PNG_EXPORT(89, png_voidp, png_get_user_chunk_ptr, (png_const_structrp png_ptr));'
- "name": png_get_compression_buffer_size
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  "return_type": unsigned long
  "signature": "\nPNG_EXPORT(6, size_t, png_get_compression_buffer_size,\n    (png_const_structrp\
    \ png_ptr));"
- "name": png_get_user_width_max
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  "return_type": unsigned int
  "signature": "\nPNG_EXPORT(187, png_uint_32, png_get_user_width_max,\n    (png_const_structrp\
    \ png_ptr));"
- "name": png_get_user_height_max
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  "return_type": unsigned int
  "signature": "\nPNG_EXPORT(188, png_uint_32, png_get_user_height_max,\n    (png_const_structrp\
    \ png_ptr));"
- "name": png_get_chunk_cache_max
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  "return_type": unsigned int
  "signature": "\nPNG_EXPORT(190, png_uint_32, png_get_chunk_cache_max,\n    (png_const_structrp\
    \ png_ptr));"
- "name": png_get_chunk_malloc_max
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  "return_type": unsigned long
  "signature": "\nPNG_EXPORT(192, png_alloc_size_t, png_get_chunk_malloc_max,\n  \
    \  (png_const_structrp png_ptr));"
- "name": png_get_io_state
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  "return_type": unsigned int
  "signature": '

    PNG_EXPORT(199, png_uint_32, png_get_io_state, (png_const_structrp png_ptr));'
- "name": png_get_io_chunk_type
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  "return_type": unsigned int
  "signature": "\nPNG_EXPORT(216, png_uint_32, png_get_io_chunk_type,\n    (png_const_structrp\
    \ png_ptr));"
- "name": png_get_palette_max
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  "return_type": int
  "signature": "\nPNG_EXPORT(243, int, png_get_palette_max, (png_const_structp png_ptr,\n\
    \    png_const_infop info_ptr));"
- "name": png_get_y_pixels_per_meter
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  "return_type": unsigned int
  "signature": "\nPNG_EXPORT(124, png_uint_32, png_get_y_pixels_per_meter,\n    (png_const_structrp\
    \ png_ptr, png_const_inforp info_ptr));"
- "name": png_get_pixels_per_meter
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  "return_type": unsigned int
  "signature": "/* Returns image resolution in pixels per meter, from pHYs chunk data.\
    \ */\nPNG_EXPORT(122, png_uint_32, png_get_pixels_per_meter,\n    (png_const_structrp\
    \ png_ptr, png_const_inforp info_ptr));"
- "name": png_get_pixel_aspect_ratio
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  "return_type": float
  "signature": "/* Returns pixel aspect ratio, computed from pHYs chunk data.  */\n\
    PNG_FP_EXPORT(125, float, png_get_pixel_aspect_ratio,\n    (png_const_structrp\
    \ png_ptr, png_const_inforp info_ptr))\nPNG_FIXED_EXPORT(210, png_fixed_point,\
    \ png_get_pixel_aspect_ratio_fixed,\n    (png_const_structrp png_ptr, png_const_inforp\
    \ info_ptr))\n\n/* Returns image x, y offset in pixels or microns, from oFFs chunk\
    \ data. */\nPNG_EXPORT(126, png_int_32, png_get_x_offset_pixels,\n    (png_const_structrp\
    \ png_ptr, png_const_inforp info_ptr));"
- "name": png_get_valid
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": flag
    "type": unsigned int
  "return_type": unsigned int
  "signature": "/* The png_set_<chunk> functions are for storing values in the png_info_struct.\n\
    \ * Similarly, the png_get_<chunk> calls are used to read values from the\n *\
    \ png_info_struct, either storing the parameters in the passed variables, or\n\
    \ * setting pointers into the png_info_struct where the data is stored.  The\n\
    \ * png_get_<chunk> functions return a non-zero value if the data was available\n\
    \ * in info_ptr, or return zero and do not change any of the parameters if the\n\
    \ * data was not available.\n *\n * These functions should be used instead of\
    \ directly accessing png_info\n * to avoid problems with future changes in the\
    \ size and internal layout of\n * png_info_struct.\n */\n/* Returns \"flag\" if\
    \ chunk data is valid in info_ptr. */\nPNG_EXPORT(110, png_uint_32, png_get_valid,\
    \ (png_const_structrp png_ptr,\n    png_const_inforp info_ptr, png_uint_32 flag));"
- "name": png_get_pixel_aspect_ratio_fixed
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  "return_type": int
  "signature": "\nPNG_FIXED_EXPORT(210, png_fixed_point, png_get_pixel_aspect_ratio_fixed,\n\
    \    (png_const_structrp png_ptr, png_const_inforp info_ptr))\n\n/* Returns image\
    \ x, y offset in pixels or microns, from oFFs chunk data. */\nPNG_EXPORT(126,\
    \ png_int_32, png_get_x_offset_pixels,\n    (png_const_structrp png_ptr, png_const_inforp\
    \ info_ptr));"
- "name": png_get_x_offset_microns
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  "return_type": int
  "signature": "\nPNG_EXPORT(128, png_int_32, png_get_x_offset_microns,\n    (png_const_structrp\
    \ png_ptr, png_const_inforp info_ptr));"
- "name": png_get_y_offset_microns
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  "return_type": int
  "signature": "\nPNG_EXPORT(129, png_int_32, png_get_y_offset_microns,\n    (png_const_structrp\
    \ png_ptr, png_const_inforp info_ptr));"
- "name": png_get_x_offset_pixels
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  "return_type": int
  "signature": "/* Returns image x, y offset in pixels or microns, from oFFs chunk\
    \ data. */\nPNG_EXPORT(126, png_int_32, png_get_x_offset_pixels,\n    (png_const_structrp\
    \ png_ptr, png_const_inforp info_ptr));"
- "name": png_get_y_offset_pixels
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  "return_type": int
  "signature": "\nPNG_EXPORT(127, png_int_32, png_get_y_offset_pixels,\n    (png_const_structrp\
    \ png_ptr, png_const_inforp info_ptr));"
- "name": png_get_pixels_per_inch
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  "return_type": unsigned int
  "signature": "\nPNG_EXPORT(193, png_uint_32, png_get_pixels_per_inch,\n    (png_const_structrp\
    \ png_ptr, png_const_inforp info_ptr));"
- "name": png_get_x_pixels_per_inch
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  "return_type": unsigned int
  "signature": "\nPNG_EXPORT(194, png_uint_32, png_get_x_pixels_per_inch,\n    (png_const_structrp\
    \ png_ptr, png_const_inforp info_ptr));"
- "name": png_get_y_pixels_per_inch
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  "return_type": unsigned int
  "signature": "\nPNG_EXPORT(195, png_uint_32, png_get_y_pixels_per_inch,\n    (png_const_structrp\
    \ png_ptr, png_const_inforp info_ptr));"
- "name": png_get_x_offset_inches_fixed
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  "return_type": int
  "signature": "/* otherwise not implemented. */\nPNG_FIXED_EXPORT(211, png_fixed_point,\
    \ png_get_x_offset_inches_fixed,\n    (png_const_structrp png_ptr, png_const_inforp\
    \ info_ptr))\n#endif\n\nPNG_FP_EXPORT(197, float, png_get_y_offset_inches, (png_const_structrp\
    \ png_ptr,\n    png_const_inforp info_ptr))\n#ifdef PNG_FIXED_POINT_SUPPORTED\
    \ /* otherwise not implemented. */\nPNG_FIXED_EXPORT(212, png_fixed_point, png_get_y_offset_inches_fixed,\n\
    \    (png_const_structrp png_ptr, png_const_inforp info_ptr))\n#endif\n\n#  ifdef\
    \ PNG_pHYs_SUPPORTED\nPNG_EXPORT(198, png_uint_32, png_get_pHYs_dpi, (png_const_structrp\
    \ png_ptr,\n    png_const_inforp info_ptr, png_uint_32 *res_x, png_uint_32 *res_y,\n\
    \    int *unit_type));"
- "name": png_get_y_offset_inches_fixed
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  "return_type": int
  "signature": "/* otherwise not implemented. */\nPNG_FIXED_EXPORT(212, png_fixed_point,\
    \ png_get_y_offset_inches_fixed,\n    (png_const_structrp png_ptr, png_const_inforp\
    \ info_ptr))\n#endif\n\n#  ifdef PNG_pHYs_SUPPORTED\nPNG_EXPORT(198, png_uint_32,\
    \ png_get_pHYs_dpi, (png_const_structrp png_ptr,\n    png_const_inforp info_ptr,\
    \ png_uint_32 *res_x, png_uint_32 *res_y,\n    int *unit_type));"
- "name": png_get_rowbytes
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  "return_type": unsigned long
  "signature": "/* Returns number of bytes needed to hold a transformed row. */\n\
    PNG_EXPORT(111, size_t, png_get_rowbytes, (png_const_structrp png_ptr,\n    png_const_inforp\
    \ info_ptr));"
- "name": png_get_x_offset_inches
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  "return_type": float
  "signature": "\nPNG_FP_EXPORT(196, float, png_get_x_offset_inches,\n    (png_const_structrp\
    \ png_ptr, png_const_inforp info_ptr))\n#ifdef PNG_FIXED_POINT_SUPPORTED /* otherwise\
    \ not implemented. */\nPNG_FIXED_EXPORT(211, png_fixed_point, png_get_x_offset_inches_fixed,\n\
    \    (png_const_structrp png_ptr, png_const_inforp info_ptr))\n#endif\n\nPNG_FP_EXPORT(197,\
    \ float, png_get_y_offset_inches, (png_const_structrp png_ptr,\n    png_const_inforp\
    \ info_ptr))\n#ifdef PNG_FIXED_POINT_SUPPORTED /* otherwise not implemented. */\n\
    PNG_FIXED_EXPORT(212, png_fixed_point, png_get_y_offset_inches_fixed,\n    (png_const_structrp\
    \ png_ptr, png_const_inforp info_ptr))\n#endif\n\n#  ifdef PNG_pHYs_SUPPORTED\n\
    PNG_EXPORT(198, png_uint_32, png_get_pHYs_dpi, (png_const_structrp png_ptr,\n\
    \    png_const_inforp info_ptr, png_uint_32 *res_x, png_uint_32 *res_y,\n    int\
    \ *unit_type));"
- "name": png_get_y_offset_inches
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  "return_type": float
  "signature": "\nPNG_FP_EXPORT(197, float, png_get_y_offset_inches, (png_const_structrp\
    \ png_ptr,\n    png_const_inforp info_ptr))\n#ifdef PNG_FIXED_POINT_SUPPORTED\
    \ /* otherwise not implemented. */\nPNG_FIXED_EXPORT(212, png_fixed_point, png_get_y_offset_inches_fixed,\n\
    \    (png_const_structrp png_ptr, png_const_inforp info_ptr))\n#endif\n\n#  ifdef\
    \ PNG_pHYs_SUPPORTED\nPNG_EXPORT(198, png_uint_32, png_get_pHYs_dpi, (png_const_structrp\
    \ png_ptr,\n    png_const_inforp info_ptr, png_uint_32 *res_x, png_uint_32 *res_y,\n\
    \    int *unit_type));"
- "name": png_get_pHYs_dpi
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": res_x
    "type": unsigned int
  - "name": res_y
    "type": unsigned int
  - "name": unit_type
    "type": int
  "return_type": unsigned int
  "signature": "\nPNG_EXPORT(198, png_uint_32, png_get_pHYs_dpi, (png_const_structrp\
    \ png_ptr,\n    png_const_inforp info_ptr, png_uint_32 *res_x, png_uint_32 *res_y,\n\
    \    int *unit_type));"
- "name": png_get_channels
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  "return_type": unsigned char
  "signature": "/* Returns number of color channels in image. */\nPNG_EXPORT(114,\
    \ png_byte, png_get_channels, (png_const_structrp png_ptr,\n    png_const_inforp\
    \ info_ptr));"
- "name": png_get_signature
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  "return_type": unsigned char
  "signature": "/* Returns pointer to signature string read from PNG header */\nPNG_EXPORT(130,\
    \ png_const_bytep, png_get_signature, (png_const_structrp png_ptr,\n    png_const_inforp\
    \ info_ptr));"
- "name": png_get_bKGD
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": background
    "type": struct png_color_16_struct
  "return_type": unsigned int
  "signature": "\nPNG_EXPORT(131, png_uint_32, png_get_bKGD, (png_const_structrp png_ptr,\n\
    \    png_inforp info_ptr, png_color_16p *background));"
- "name": png_get_rows
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  "return_type": unsigned char
  "signature": "/* Returns row_pointers, which is an array of pointers to scanlines\
    \ that was\n * returned from png_read_png().\n */\nPNG_EXPORT(112, png_bytepp,\
    \ png_get_rows, (png_const_structrp png_ptr,\n    png_const_inforp info_ptr));"
- "name": png_get_cHRM
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": whitex
    "type": double
  - "name": whitey
    "type": double
  - "name": redx
    "type": double
  - "name": redy
    "type": double
  - "name": greenx
    "type": double
  - "name": greeny
    "type": double
  - "name": bluex
    "type": double
  - "name": bluey
    "type": double
  "return_type": unsigned int
  "signature": "\nPNG_FP_EXPORT(133, png_uint_32, png_get_cHRM, (png_const_structrp\
    \ png_ptr,\n    png_const_inforp info_ptr, double *white_x, double *white_y, double\
    \ *red_x,\n    double *red_y, double *green_x, double *green_y, double *blue_x,\n\
    \    double *blue_y))\nPNG_FP_EXPORT(230, png_uint_32, png_get_cHRM_XYZ, (png_const_structrp\
    \ png_ptr,\n    png_const_inforp info_ptr, double *red_X, double *red_Y, double\
    \ *red_Z,\n    double *green_X, double *green_Y, double *green_Z, double *blue_X,\n\
    \    double *blue_Y, double *blue_Z))\nPNG_FIXED_EXPORT(134, png_uint_32, png_get_cHRM_fixed,\n\
    \    (png_const_structrp png_ptr, png_const_inforp info_ptr,\n    png_fixed_point\
    \ *int_white_x, png_fixed_point *int_white_y,\n    png_fixed_point *int_red_x,\
    \ png_fixed_point *int_red_y,\n    png_fixed_point *int_green_x, png_fixed_point\
    \ *int_green_y,\n    png_fixed_point *int_blue_x, png_fixed_point *int_blue_y))\n\
    PNG_FIXED_EXPORT(231, png_uint_32, png_get_cHRM_XYZ_fixed,\n    (png_const_structrp\
    \ png_ptr, png_const_inforp info_ptr,\n    png_fixed_point *int_red_X, png_fixed_point\
    \ *int_red_Y,\n    png_fixed_point *int_red_Z, png_fixed_point *int_green_X,\n\
    \    png_fixed_point *int_green_Y, png_fixed_point *int_green_Z,\n    png_fixed_point\
    \ *int_blue_X, png_fixed_point *int_blue_Y,\n    png_fixed_point *int_blue_Z))\n\
    #endif\n\n#ifdef PNG_cHRM_SUPPORTED\nPNG_FP_EXPORT(135, void, png_set_cHRM, (png_const_structrp\
    \ png_ptr,\n    png_inforp info_ptr,\n    double white_x, double white_y, double\
    \ red_x, double red_y, double green_x,\n    double green_y, double blue_x, double\
    \ blue_y))\nPNG_FP_EXPORT(232, void, png_set_cHRM_XYZ, (png_const_structrp png_ptr,\n\
    \    png_inforp info_ptr, double red_X, double red_Y, double red_Z,\n    double\
    \ green_X, double green_Y, double green_Z, double blue_X,\n    double blue_Y,\
    \ double blue_Z))\nPNG_FIXED_EXPORT(136, void, png_set_cHRM_fixed, (png_const_structrp\
    \ png_ptr,\n    png_inforp info_ptr, png_fixed_point int_white_x,\n    png_fixed_point\
    \ int_white_y, png_fixed_point int_red_x,\n    png_fixed_point int_red_y, png_fixed_point\
    \ int_green_x,\n    png_fixed_point int_green_y, png_fixed_point int_blue_x,\n\
    \    png_fixed_point int_blue_y))\nPNG_FIXED_EXPORT(233, void, png_set_cHRM_XYZ_fixed,\
    \ (png_const_structrp png_ptr,\n    png_inforp info_ptr, png_fixed_point int_red_X,\
    \ png_fixed_point int_red_Y,\n    png_fixed_point int_red_Z, png_fixed_point int_green_X,\n\
    \    png_fixed_point int_green_Y, png_fixed_point int_green_Z,\n    png_fixed_point\
    \ int_blue_X, png_fixed_point int_blue_Y,\n    png_fixed_point int_blue_Z))\n\
    #endif\n\n#ifdef PNG_cICP_SUPPORTED\nPNG_EXPORT(250, png_uint_32, png_get_cICP,\
    \ (png_const_structrp png_ptr,\n    png_const_inforp info_ptr, png_bytep colour_primaries,\n\
    \    png_bytep transfer_function, png_bytep matrix_coefficients,\n    png_bytep\
    \ video_full_range_flag));"
- "name": png_get_cHRM_XYZ
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": red_X
    "type": double
  - "name": red_Y
    "type": double
  - "name": red_Z
    "type": double
  - "name": green_X
    "type": double
  - "name": green_Y
    "type": double
  - "name": green_Z
    "type": double
  - "name": blue_X
    "type": double
  - "name": blue_Y
    "type": double
  - "name": blue_Z
    "type": double
  "return_type": unsigned int
  "signature": "\nPNG_FP_EXPORT(230, png_uint_32, png_get_cHRM_XYZ, (png_const_structrp\
    \ png_ptr,\n    png_const_inforp info_ptr, double *red_X, double *red_Y, double\
    \ *red_Z,\n    double *green_X, double *green_Y, double *green_Z, double *blue_X,\n\
    \    double *blue_Y, double *blue_Z))\nPNG_FIXED_EXPORT(134, png_uint_32, png_get_cHRM_fixed,\n\
    \    (png_const_structrp png_ptr, png_const_inforp info_ptr,\n    png_fixed_point\
    \ *int_white_x, png_fixed_point *int_white_y,\n    png_fixed_point *int_red_x,\
    \ png_fixed_point *int_red_y,\n    png_fixed_point *int_green_x, png_fixed_point\
    \ *int_green_y,\n    png_fixed_point *int_blue_x, png_fixed_point *int_blue_y))\n\
    PNG_FIXED_EXPORT(231, png_uint_32, png_get_cHRM_XYZ_fixed,\n    (png_const_structrp\
    \ png_ptr, png_const_inforp info_ptr,\n    png_fixed_point *int_red_X, png_fixed_point\
    \ *int_red_Y,\n    png_fixed_point *int_red_Z, png_fixed_point *int_green_X,\n\
    \    png_fixed_point *int_green_Y, png_fixed_point *int_green_Z,\n    png_fixed_point\
    \ *int_blue_X, png_fixed_point *int_blue_Y,\n    png_fixed_point *int_blue_Z))\n\
    #endif\n\n#ifdef PNG_cHRM_SUPPORTED\nPNG_FP_EXPORT(135, void, png_set_cHRM, (png_const_structrp\
    \ png_ptr,\n    png_inforp info_ptr,\n    double white_x, double white_y, double\
    \ red_x, double red_y, double green_x,\n    double green_y, double blue_x, double\
    \ blue_y))\nPNG_FP_EXPORT(232, void, png_set_cHRM_XYZ, (png_const_structrp png_ptr,\n\
    \    png_inforp info_ptr, double red_X, double red_Y, double red_Z,\n    double\
    \ green_X, double green_Y, double green_Z, double blue_X,\n    double blue_Y,\
    \ double blue_Z))\nPNG_FIXED_EXPORT(136, void, png_set_cHRM_fixed, (png_const_structrp\
    \ png_ptr,\n    png_inforp info_ptr, png_fixed_point int_white_x,\n    png_fixed_point\
    \ int_white_y, png_fixed_point int_red_x,\n    png_fixed_point int_red_y, png_fixed_point\
    \ int_green_x,\n    png_fixed_point int_green_y, png_fixed_point int_blue_x,\n\
    \    png_fixed_point int_blue_y))\nPNG_FIXED_EXPORT(233, void, png_set_cHRM_XYZ_fixed,\
    \ (png_const_structrp png_ptr,\n    png_inforp info_ptr, png_fixed_point int_red_X,\
    \ png_fixed_point int_red_Y,\n    png_fixed_point int_red_Z, png_fixed_point int_green_X,\n\
    \    png_fixed_point int_green_Y, png_fixed_point int_green_Z,\n    png_fixed_point\
    \ int_blue_X, png_fixed_point int_blue_Y,\n    png_fixed_point int_blue_Z))\n\
    #endif\n\n#ifdef PNG_cICP_SUPPORTED\nPNG_EXPORT(250, png_uint_32, png_get_cICP,\
    \ (png_const_structrp png_ptr,\n    png_const_inforp info_ptr, png_bytep colour_primaries,\n\
    \    png_bytep transfer_function, png_bytep matrix_coefficients,\n    png_bytep\
    \ video_full_range_flag));"
- "name": png_get_cHRM_XYZ_fixed
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": int_red_X
    "type": int
  - "name": int_red_Y
    "type": int
  - "name": int_red_Z
    "type": int
  - "name": int_green_X
    "type": int
  - "name": int_green_Y
    "type": int
  - "name": int_green_Z
    "type": int
  - "name": int_blue_X
    "type": int
  - "name": int_blue_Y
    "type": int
  - "name": int_blue_Z
    "type": int
  "return_type": unsigned int
  "signature": "\nPNG_FIXED_EXPORT(231, png_uint_32, png_get_cHRM_XYZ_fixed,\n   \
    \ (png_const_structrp png_ptr, png_const_inforp info_ptr,\n    png_fixed_point\
    \ *int_red_X, png_fixed_point *int_red_Y,\n    png_fixed_point *int_red_Z, png_fixed_point\
    \ *int_green_X,\n    png_fixed_point *int_green_Y, png_fixed_point *int_green_Z,\n\
    \    png_fixed_point *int_blue_X, png_fixed_point *int_blue_Y,\n    png_fixed_point\
    \ *int_blue_Z))\n#endif\n\n#ifdef PNG_cHRM_SUPPORTED\nPNG_FP_EXPORT(135, void,\
    \ png_set_cHRM, (png_const_structrp png_ptr,\n    png_inforp info_ptr,\n    double\
    \ white_x, double white_y, double red_x, double red_y, double green_x,\n    double\
    \ green_y, double blue_x, double blue_y))\nPNG_FP_EXPORT(232, void, png_set_cHRM_XYZ,\
    \ (png_const_structrp png_ptr,\n    png_inforp info_ptr, double red_X, double\
    \ red_Y, double red_Z,\n    double green_X, double green_Y, double green_Z, double\
    \ blue_X,\n    double blue_Y, double blue_Z))\nPNG_FIXED_EXPORT(136, void, png_set_cHRM_fixed,\
    \ (png_const_structrp png_ptr,\n    png_inforp info_ptr, png_fixed_point int_white_x,\n\
    \    png_fixed_point int_white_y, png_fixed_point int_red_x,\n    png_fixed_point\
    \ int_red_y, png_fixed_point int_green_x,\n    png_fixed_point int_green_y, png_fixed_point\
    \ int_blue_x,\n    png_fixed_point int_blue_y))\nPNG_FIXED_EXPORT(233, void, png_set_cHRM_XYZ_fixed,\
    \ (png_const_structrp png_ptr,\n    png_inforp info_ptr, png_fixed_point int_red_X,\
    \ png_fixed_point int_red_Y,\n    png_fixed_point int_red_Z, png_fixed_point int_green_X,\n\
    \    png_fixed_point int_green_Y, png_fixed_point int_green_Z,\n    png_fixed_point\
    \ int_blue_X, png_fixed_point int_blue_Y,\n    png_fixed_point int_blue_Z))\n\
    #endif\n\n#ifdef PNG_cICP_SUPPORTED\nPNG_EXPORT(250, png_uint_32, png_get_cICP,\
    \ (png_const_structrp png_ptr,\n    png_const_inforp info_ptr, png_bytep colour_primaries,\n\
    \    png_bytep transfer_function, png_bytep matrix_coefficients,\n    png_bytep\
    \ video_full_range_flag));"
- "name": png_get_cHRM_fixed
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": whitex
    "type": int
  - "name": whitey
    "type": int
  - "name": redx
    "type": int
  - "name": redy
    "type": int
  - "name": greenx
    "type": int
  - "name": greeny
    "type": int
  - "name": bluex
    "type": int
  - "name": bluey
    "type": int
  "return_type": unsigned int
  "signature": "\nPNG_FIXED_EXPORT(134, png_uint_32, png_get_cHRM_fixed,\n    (png_const_structrp\
    \ png_ptr, png_const_inforp info_ptr,\n    png_fixed_point *int_white_x, png_fixed_point\
    \ *int_white_y,\n    png_fixed_point *int_red_x, png_fixed_point *int_red_y,\n\
    \    png_fixed_point *int_green_x, png_fixed_point *int_green_y,\n    png_fixed_point\
    \ *int_blue_x, png_fixed_point *int_blue_y))\nPNG_FIXED_EXPORT(231, png_uint_32,\
    \ png_get_cHRM_XYZ_fixed,\n    (png_const_structrp png_ptr, png_const_inforp info_ptr,\n\
    \    png_fixed_point *int_red_X, png_fixed_point *int_red_Y,\n    png_fixed_point\
    \ *int_red_Z, png_fixed_point *int_green_X,\n    png_fixed_point *int_green_Y,\
    \ png_fixed_point *int_green_Z,\n    png_fixed_point *int_blue_X, png_fixed_point\
    \ *int_blue_Y,\n    png_fixed_point *int_blue_Z))\n#endif\n\n#ifdef PNG_cHRM_SUPPORTED\n\
    PNG_FP_EXPORT(135, void, png_set_cHRM, (png_const_structrp png_ptr,\n    png_inforp\
    \ info_ptr,\n    double white_x, double white_y, double red_x, double red_y, double\
    \ green_x,\n    double green_y, double blue_x, double blue_y))\nPNG_FP_EXPORT(232,\
    \ void, png_set_cHRM_XYZ, (png_const_structrp png_ptr,\n    png_inforp info_ptr,\
    \ double red_X, double red_Y, double red_Z,\n    double green_X, double green_Y,\
    \ double green_Z, double blue_X,\n    double blue_Y, double blue_Z))\nPNG_FIXED_EXPORT(136,\
    \ void, png_set_cHRM_fixed, (png_const_structrp png_ptr,\n    png_inforp info_ptr,\
    \ png_fixed_point int_white_x,\n    png_fixed_point int_white_y, png_fixed_point\
    \ int_red_x,\n    png_fixed_point int_red_y, png_fixed_point int_green_x,\n  \
    \  png_fixed_point int_green_y, png_fixed_point int_blue_x,\n    png_fixed_point\
    \ int_blue_y))\nPNG_FIXED_EXPORT(233, void, png_set_cHRM_XYZ_fixed, (png_const_structrp\
    \ png_ptr,\n    png_inforp info_ptr, png_fixed_point int_red_X, png_fixed_point\
    \ int_red_Y,\n    png_fixed_point int_red_Z, png_fixed_point int_green_X,\n  \
    \  png_fixed_point int_green_Y, png_fixed_point int_green_Z,\n    png_fixed_point\
    \ int_blue_X, png_fixed_point int_blue_Y,\n    png_fixed_point int_blue_Z))\n\
    #endif\n\n#ifdef PNG_cICP_SUPPORTED\nPNG_EXPORT(250, png_uint_32, png_get_cICP,\
    \ (png_const_structrp png_ptr,\n    png_const_inforp info_ptr, png_bytep colour_primaries,\n\
    \    png_bytep transfer_function, png_bytep matrix_coefficients,\n    png_bytep\
    \ video_full_range_flag));"
- "name": png_get_image_width
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  "return_type": unsigned int
  "signature": "/* Returns image width in pixels. */\nPNG_EXPORT(115, png_uint_32,\
    \ png_get_image_width, (png_const_structrp png_ptr,\n    png_const_inforp info_ptr));"
- "name": png_get_gAMA_fixed
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": file_gamma
    "type": int
  "return_type": unsigned int
  "signature": "\nPNG_FIXED_EXPORT(138, png_uint_32, png_get_gAMA_fixed,\n    (png_const_structrp\
    \ png_ptr, png_const_inforp info_ptr,\n    png_fixed_point *int_file_gamma))\n\
    #endif\n\n#ifdef PNG_gAMA_SUPPORTED\nPNG_FP_EXPORT(139, void, png_set_gAMA, (png_const_structrp\
    \ png_ptr,\n    png_inforp info_ptr, double file_gamma))\nPNG_FIXED_EXPORT(140,\
    \ void, png_set_gAMA_fixed, (png_const_structrp png_ptr,\n    png_inforp info_ptr,\
    \ png_fixed_point int_file_gamma))\n#endif\n\n#ifdef PNG_hIST_SUPPORTED\nPNG_EXPORT(141,\
    \ png_uint_32, png_get_hIST, (png_const_structrp png_ptr,\n    png_inforp info_ptr,\
    \ png_uint_16p *hist));"
- "name": png_get_gAMA
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": file_gamma
    "type": double
  "return_type": unsigned int
  "signature": "\nPNG_FP_EXPORT(137, png_uint_32, png_get_gAMA, (png_const_structrp\
    \ png_ptr,\n    png_const_inforp info_ptr, double *file_gamma))\nPNG_FIXED_EXPORT(138,\
    \ png_uint_32, png_get_gAMA_fixed,\n    (png_const_structrp png_ptr, png_const_inforp\
    \ info_ptr,\n    png_fixed_point *int_file_gamma))\n#endif\n\n#ifdef PNG_gAMA_SUPPORTED\n\
    PNG_FP_EXPORT(139, void, png_set_gAMA, (png_const_structrp png_ptr,\n    png_inforp\
    \ info_ptr, double file_gamma))\nPNG_FIXED_EXPORT(140, void, png_set_gAMA_fixed,\
    \ (png_const_structrp png_ptr,\n    png_inforp info_ptr, png_fixed_point int_file_gamma))\n\
    #endif\n\n#ifdef PNG_hIST_SUPPORTED\nPNG_EXPORT(141, png_uint_32, png_get_hIST,\
    \ (png_const_structrp png_ptr,\n    png_inforp info_ptr, png_uint_16p *hist));"
- "name": png_get_sRGB
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": file_srgb_intent
    "type": int
  "return_type": unsigned int
  "signature": "\nPNG_EXPORT(155, png_uint_32, png_get_sRGB, (png_const_structrp png_ptr,\n\
    \    png_const_inforp info_ptr, int *file_srgb_intent));"
- "name": png_get_iCCP
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": name
    "type": char
  - "name": compression_type
    "type": int
  - "name": profile
    "type": unsigned char
  - "name": proflen
    "type": unsigned int
  "return_type": unsigned int
  "signature": "\nPNG_EXPORT(158, png_uint_32, png_get_iCCP, (png_const_structrp png_ptr,\n\
    \    png_inforp info_ptr, png_charpp name, int *compression_type,\n    png_bytepp\
    \ profile, png_uint_32 *proflen));"
- "name": png_get_image_height
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  "return_type": unsigned int
  "signature": "/* Returns image height in pixels. */\nPNG_EXPORT(116, png_uint_32,\
    \ png_get_image_height, (png_const_structrp png_ptr,\n    png_const_inforp info_ptr));"
- "name": png_get_sPLT
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": spalettes
    "type": struct png_sPLT_struct
  "return_type": int
  "signature": "\nPNG_EXPORT(160, int, png_get_sPLT, (png_const_structrp png_ptr,\n\
    \    png_inforp info_ptr, png_sPLT_tpp entries));"
- "name": png_get_cICP
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": colour_primaries
    "type": unsigned char
  - "name": transfer_function
    "type": unsigned char
  - "name": matrix_coefficients
    "type": unsigned char
  - "name": video_full_range_flag
    "type": unsigned char
  "return_type": unsigned int
  "signature": "\nPNG_EXPORT(250, png_uint_32, png_get_cICP, (png_const_structrp png_ptr,\n\
    \    png_const_inforp info_ptr, png_bytep colour_primaries,\n    png_bytep transfer_function,\
    \ png_bytep matrix_coefficients,\n    png_bytep video_full_range_flag));"
- "name": png_get_cLLI_fixed
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": maxCLL
    "type": unsigned int
  - "name": maxFALL
    "type": unsigned int
  "return_type": unsigned int
  "signature": "\nPNG_FIXED_EXPORT(253, png_uint_32, png_get_cLLI_fixed,\n    (png_const_structrp\
    \ png_ptr, png_const_inforp info_ptr,\n    /* The values below are in cd/m2 (nits)\
    \ and are scaled by 10,000;"
- "name": png_get_cLLI
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": maxCLL
    "type": double
  - "name": maxFALL
    "type": double
  "return_type": unsigned int
  "signature": "\nPNG_FP_EXPORT(252, png_uint_32, png_get_cLLI, (png_const_structrp\
    \ png_ptr,\n         png_const_inforp info_ptr, double *maximum_content_light_level,\n\
    \         double *maximum_frame_average_light_level))\nPNG_FIXED_EXPORT(253, png_uint_32,\
    \ png_get_cLLI_fixed,\n    (png_const_structrp png_ptr, png_const_inforp info_ptr,\n\
    \    /* The values below are in cd/m2 (nits) and are scaled by 10,000;"
- "name": png_get_bit_depth
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  "return_type": unsigned char
  "signature": "/* Returns image bit_depth. */\nPNG_EXPORT(117, png_byte, png_get_bit_depth,\
    \ (png_const_structrp png_ptr,\n    png_const_inforp info_ptr));"
- "name": png_get_mDCV_fixed
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": white_x
    "type": int
  - "name": white_y
    "type": int
  - "name": red_x
    "type": int
  - "name": red_y
    "type": int
  - "name": green_x
    "type": int
  - "name": green_y
    "type": int
  - "name": blue_x
    "type": int
  - "name": blue_y
    "type": int
  - "name": mastering_maxDL
    "type": unsigned int
  - "name": mastering_minDL
    "type": unsigned int
  "return_type": unsigned int
  "signature": "\nPNG_FIXED_EXPORT(257, png_uint_32, png_get_mDCV_fixed,\n    (png_const_structrp\
    \ png_ptr, png_const_inforp info_ptr,\n    png_fixed_point *int_white_x, png_fixed_point\
    \ *int_white_y,\n    png_fixed_point *int_red_x, png_fixed_point *int_red_y,\n\
    \    png_fixed_point *int_green_x, png_fixed_point *int_green_y,\n    png_fixed_point\
    \ *int_blue_x, png_fixed_point *int_blue_y,\n    /* Mastering display luminance\
    \ in cd/m2 (nits) multiplied (scaled) by\n     * 10,000.\n     */\n    png_uint_32p\
    \ mastering_display_maximum_luminance_scaled_by_10000,\n    png_uint_32p mastering_display_minimum_luminance_scaled_by_10000))\n\
    #endif\n\n#ifdef PNG_mDCV_SUPPORTED\nPNG_FP_EXPORT(258, void, png_set_mDCV, (png_const_structrp\
    \ png_ptr,\n    png_inforp info_ptr,\n    /* The chromaticities of the mastering\
    \ display.  As cHRM, but independent of\n     * the encoding endpoints in cHRM,\
    \ or cICP, or iCCP.\n     */\n    double white_x, double white_y, double red_x,\
    \ double red_y, double green_x,\n    double green_y, double blue_x, double blue_y,\n\
    \    /* Mastering display luminance in cd/m2 (nits). */\n    double mastering_display_maximum_luminance,\n\
    \    double mastering_display_minimum_luminance))\n\nPNG_FIXED_EXPORT(259, void,\
    \ png_set_mDCV_fixed, (png_const_structrp png_ptr,\n    png_inforp info_ptr,\n\
    \    /* The admissible range of these values is not the full range of a PNG\n\
    \     * fixed point value.  Negative values cannot be encoded and the maximum\n\
    \     * value is about 1.3 */\n    png_fixed_point int_white_x, png_fixed_point\
    \ int_white_y,\n    png_fixed_point int_red_x, png_fixed_point int_red_y,\n  \
    \  png_fixed_point int_green_x, png_fixed_point int_green_y,\n    png_fixed_point\
    \ int_blue_x, png_fixed_point int_blue_y,\n    /* These are PNG unsigned 4 byte\
    \ values: 31-bit unsigned values.  The MSB\n     * must be zero.\n     */\n  \
    \  png_uint_32 mastering_display_maximum_luminance_scaled_by_10000,\n    png_uint_32\
    \ mastering_display_minimum_luminance_scaled_by_10000))\n#endif\n\n#ifdef PNG_oFFs_SUPPORTED\n\
    PNG_EXPORT(145, png_uint_32, png_get_oFFs, (png_const_structrp png_ptr,\n   png_const_inforp\
    \ info_ptr, png_int_32 *offset_x, png_int_32 *offset_y,\n   int *unit_type));"
- "name": png_get_mDCV
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": white_x
    "type": double
  - "name": white_y
    "type": double
  - "name": red_x
    "type": double
  - "name": red_y
    "type": double
  - "name": green_x
    "type": double
  - "name": green_y
    "type": double
  - "name": blue_x
    "type": double
  - "name": blue_y
    "type": double
  - "name": mastering_maxDL
    "type": double
  - "name": mastering_minDL
    "type": double
  "return_type": unsigned int
  "signature": "\nPNG_FP_EXPORT(256, png_uint_32, png_get_mDCV, (png_const_structrp\
    \ png_ptr,\n    png_const_inforp info_ptr,\n    /* The chromaticities of the mastering\
    \ display.  As cHRM, but independent of\n     * the encoding endpoints in cHRM,\
    \ or cICP, or iCCP.  These values will\n     * always be in the range 0 to 1.3107.\n\
    \     */\n    double *white_x, double *white_y, double *red_x, double *red_y,\n\
    \    double *green_x, double *green_y, double *blue_x, double *blue_y,\n    /*\
    \ Mastering display luminance in cd/m2 (nits). */\n    double *mastering_display_maximum_luminance,\n\
    \    double *mastering_display_minimum_luminance))\n\nPNG_FIXED_EXPORT(257, png_uint_32,\
    \ png_get_mDCV_fixed,\n    (png_const_structrp png_ptr, png_const_inforp info_ptr,\n\
    \    png_fixed_point *int_white_x, png_fixed_point *int_white_y,\n    png_fixed_point\
    \ *int_red_x, png_fixed_point *int_red_y,\n    png_fixed_point *int_green_x, png_fixed_point\
    \ *int_green_y,\n    png_fixed_point *int_blue_x, png_fixed_point *int_blue_y,\n\
    \    /* Mastering display luminance in cd/m2 (nits) multiplied (scaled) by\n \
    \    * 10,000.\n     */\n    png_uint_32p mastering_display_maximum_luminance_scaled_by_10000,\n\
    \    png_uint_32p mastering_display_minimum_luminance_scaled_by_10000))\n#endif\n\
    \n#ifdef PNG_mDCV_SUPPORTED\nPNG_FP_EXPORT(258, void, png_set_mDCV, (png_const_structrp\
    \ png_ptr,\n    png_inforp info_ptr,\n    /* The chromaticities of the mastering\
    \ display.  As cHRM, but independent of\n     * the encoding endpoints in cHRM,\
    \ or cICP, or iCCP.\n     */\n    double white_x, double white_y, double red_x,\
    \ double red_y, double green_x,\n    double green_y, double blue_x, double blue_y,\n\
    \    /* Mastering display luminance in cd/m2 (nits). */\n    double mastering_display_maximum_luminance,\n\
    \    double mastering_display_minimum_luminance))\n\nPNG_FIXED_EXPORT(259, void,\
    \ png_set_mDCV_fixed, (png_const_structrp png_ptr,\n    png_inforp info_ptr,\n\
    \    /* The admissible range of these values is not the full range of a PNG\n\
    \     * fixed point value.  Negative values cannot be encoded and the maximum\n\
    \     * value is about 1.3 */\n    png_fixed_point int_white_x, png_fixed_point\
    \ int_white_y,\n    png_fixed_point int_red_x, png_fixed_point int_red_y,\n  \
    \  png_fixed_point int_green_x, png_fixed_point int_green_y,\n    png_fixed_point\
    \ int_blue_x, png_fixed_point int_blue_y,\n    /* These are PNG unsigned 4 byte\
    \ values: 31-bit unsigned values.  The MSB\n     * must be zero.\n     */\n  \
    \  png_uint_32 mastering_display_maximum_luminance_scaled_by_10000,\n    png_uint_32\
    \ mastering_display_minimum_luminance_scaled_by_10000))\n#endif\n\n#ifdef PNG_oFFs_SUPPORTED\n\
    PNG_EXPORT(145, png_uint_32, png_get_oFFs, (png_const_structrp png_ptr,\n   png_const_inforp\
    \ info_ptr, png_int_32 *offset_x, png_int_32 *offset_y,\n   int *unit_type));"
- "name": png_get_eXIf
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": exif
    "type": unsigned char
  "return_type": unsigned int
  "signature": "\nPNG_EXPORT(246, png_uint_32, png_get_eXIf, (png_const_structrp png_ptr,\n\
    \    png_inforp info_ptr, png_bytep *exif));"
- "name": png_get_color_type
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  "return_type": unsigned char
  "signature": "/* Returns image color_type. */\nPNG_EXPORT(118, png_byte, png_get_color_type,\
    \ (png_const_structrp png_ptr,\n    png_const_inforp info_ptr));"
- "name": png_get_eXIf_1
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": num_exif
    "type": unsigned int
  - "name": exif
    "type": unsigned char
  "return_type": unsigned int
  "signature": "\nPNG_EXPORT(248, png_uint_32, png_get_eXIf_1, (png_const_structrp\
    \ png_ptr,\n    png_const_inforp info_ptr, png_uint_32 *num_exif, png_bytep *exif));"
- "name": png_get_hIST
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": hist
    "type": unsigned short
  "return_type": unsigned int
  "signature": "\nPNG_EXPORT(141, png_uint_32, png_get_hIST, (png_const_structrp png_ptr,\n\
    \    png_inforp info_ptr, png_uint_16p *hist));"
- "name": png_get_IHDR
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": width
    "type": unsigned int
  - "name": height
    "type": unsigned int
  - "name": bit_depth
    "type": int
  - "name": color_type
    "type": int
  - "name": interlace_type
    "type": int
  - "name": compression_type
    "type": int
  - "name": filter_type
    "type": int
  "return_type": unsigned int
  "signature": "\nPNG_EXPORT(143, png_uint_32, png_get_IHDR, (png_const_structrp png_ptr,\n\
    \    png_const_inforp info_ptr, png_uint_32 *width, png_uint_32 *height,\n   \
    \ int *bit_depth, int *color_type, int *interlace_method,\n    int *compression_method,\
    \ int *filter_method));"
- "name": png_get_oFFs
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": offset_x
    "type": int
  - "name": offset_y
    "type": int
  - "name": unit_type
    "type": int
  "return_type": unsigned int
  "signature": "\nPNG_EXPORT(145, png_uint_32, png_get_oFFs, (png_const_structrp png_ptr,\n\
    \   png_const_inforp info_ptr, png_int_32 *offset_x, png_int_32 *offset_y,\n \
    \  int *unit_type));"
- "name": png_get_filter_type
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  "return_type": unsigned char
  "signature": "/* Returns image filter_type. */\nPNG_EXPORT(119, png_byte, png_get_filter_type,\
    \ (png_const_structrp png_ptr,\n    png_const_inforp info_ptr));"
- "name": png_set_tIME
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": mod_time
    "type": struct png_time_struct
  "return_type": void
  "signature": "\nPNG_EXPORT(165, void, png_set_tIME, (png_const_structrp png_ptr,\n\
    \    png_inforp info_ptr, png_const_timep mod_time));"
- "name": png_set_tRNS
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": trans_alpha
    "type": unsigned char
  - "name": num_trans
    "type": int
  - "name": trans_color
    "type": struct png_color_16_struct
  "return_type": void
  "signature": "\nPNG_EXPORT(167, void, png_set_tRNS, (png_structrp png_ptr,\n   \
    \ png_inforp info_ptr, png_const_bytep trans_alpha, int num_trans,\n    png_const_color_16p\
    \ trans_color));"
- "name": png_set_cHRM_XYZ
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": red_X
    "type": double
  - "name": red_Y
    "type": double
  - "name": red_Z
    "type": double
  - "name": green_X
    "type": double
  - "name": green_Y
    "type": double
  - "name": green_Z
    "type": double
  - "name": blue_X
    "type": double
  - "name": blue_Y
    "type": double
  - "name": blue_Z
    "type": double
  "return_type": void
  "signature": "\nPNG_FP_EXPORT(232, void, png_set_cHRM_XYZ, (png_const_structrp png_ptr,\n\
    \    png_inforp info_ptr, double red_X, double red_Y, double red_Z,\n    double\
    \ green_X, double green_Y, double green_Z, double blue_X,\n    double blue_Y,\
    \ double blue_Z))\nPNG_FIXED_EXPORT(136, void, png_set_cHRM_fixed, (png_const_structrp\
    \ png_ptr,\n    png_inforp info_ptr, png_fixed_point int_white_x,\n    png_fixed_point\
    \ int_white_y, png_fixed_point int_red_x,\n    png_fixed_point int_red_y, png_fixed_point\
    \ int_green_x,\n    png_fixed_point int_green_y, png_fixed_point int_blue_x,\n\
    \    png_fixed_point int_blue_y))\nPNG_FIXED_EXPORT(233, void, png_set_cHRM_XYZ_fixed,\
    \ (png_const_structrp png_ptr,\n    png_inforp info_ptr, png_fixed_point int_red_X,\
    \ png_fixed_point int_red_Y,\n    png_fixed_point int_red_Z, png_fixed_point int_green_X,\n\
    \    png_fixed_point int_green_Y, png_fixed_point int_green_Z,\n    png_fixed_point\
    \ int_blue_X, png_fixed_point int_blue_Y,\n    png_fixed_point int_blue_Z))\n\
    #endif\n\n#ifdef PNG_cICP_SUPPORTED\nPNG_EXPORT(250, png_uint_32, png_get_cICP,\
    \ (png_const_structrp png_ptr,\n    png_const_inforp info_ptr, png_bytep colour_primaries,\n\
    \    png_bytep transfer_function, png_bytep matrix_coefficients,\n    png_bytep\
    \ video_full_range_flag));"
- "name": png_set_sPLT
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": entries
    "type": struct png_sPLT_struct
  - "name": nentries
    "type": int
  "return_type": void
  "signature": "\nPNG_EXPORT(161, void, png_set_sPLT, (png_const_structrp png_ptr,\n\
    \    png_inforp info_ptr, png_const_sPLT_tp entries, int nentries));"
- "name": png_set_unknown_chunks
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": unknowns
    "type": struct png_unknown_chunk_t
  - "name": num_unknowns
    "type": int
  "return_type": void
  "signature": "\nPNG_EXPORT(174, void, png_set_unknown_chunks, (png_const_structrp\
    \ png_ptr,\n    png_inforp info_ptr, png_const_unknown_chunkp unknowns,\n    int\
    \ num_unknowns));"
- "name": png_set_cICP
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": colour_primaries
    "type": unsigned char
  - "name": transfer_function
    "type": unsigned char
  - "name": matrix_coefficients
    "type": unsigned char
  - "name": video_full_range_flag
    "type": unsigned char
  "return_type": void
  "signature": "\nPNG_EXPORT(251, void, png_set_cICP, (png_const_structrp png_ptr,\n\
    \    png_inforp info_ptr, png_byte colour_primaries,\n    png_byte transfer_function,\
    \ png_byte matrix_coefficients,\n    png_byte video_full_range_flag));"
- "name": png_set_unknown_chunk_location
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": chunk
    "type": int
  - "name": location
    "type": int
  "return_type": void
  "signature": "\nPNG_EXPORT(175, void, png_set_unknown_chunk_location,\n    (png_const_structrp\
    \ png_ptr, png_inforp info_ptr, int chunk, int location));"
- "name": png_permit_mng_features
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": mng_features
    "type": unsigned int
  "return_type": unsigned int
  "signature": "\nPNG_EXPORT(184, png_uint_32, png_permit_mng_features, (png_structrp\
    \ png_ptr,\n    png_uint_32 mng_features_permitted));"
- "name": png_set_keep_unknown_chunks
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": keep
    "type": int
  - "name": chunk_list
    "type": unsigned char
  - "name": num_chunks_in
    "type": int
  "return_type": void
  "signature": "\nPNG_EXPORT(172, void, png_set_keep_unknown_chunks, (png_structrp\
    \ png_ptr,\n    int keep, png_const_bytep chunk_list, int num_chunks));"
- "name": png_set_cLLI_fixed
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": maxCLL
    "type": unsigned int
  - "name": maxFALL
    "type": unsigned int
  "return_type": void
  "signature": "\nPNG_FIXED_EXPORT(255, void, png_set_cLLI_fixed, (png_const_structrp\
    \ png_ptr,\n    png_inforp info_ptr,\n    /* The values below are in cd/m2 (nits)\
    \ and are scaled by 10,000;"
- "name": png_set_read_user_chunk_fn
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": user_chunk_ptr
    "type": void
  - "name": read_user_chunk_fn
    "type": int (struct png_struct_def *, struct png_unknown_chunk_t *)
  "return_type": void
  "signature": "/* This callback is called only for *unknown* chunks.  If\n * PNG_HANDLE_AS_UNKNOWN_SUPPORTED\
    \ is set then it is possible to set known\n * chunks to be treated as unknown,\
    \ however in this case the callback must do\n * any processing required by the\
    \ chunk (e.g. by calling the appropriate\n * png_set_ APIs.)\n *\n * There is\
    \ no write support - on write, by default, all the chunks in the\n * 'unknown'\
    \ list are written in the specified position.\n *\n * The integer return from\
    \ the callback function is interpreted thus:\n *\n * negative: An error occurred;\
    \ png_chunk_error will be called.\n *     zero: The chunk was not handled, the\
    \ chunk will be saved. A critical\n *           chunk will cause an error at this\
    \ point unless it is to be saved.\n * positive: The chunk was handled, libpng\
    \ will ignore/discard it.\n *\n * See \"INTERACTION WITH USER CHUNK CALLBACKS\"\
    \ below for important notes about\n * how this behavior will change in libpng\
    \ 1.7\n */\nPNG_EXPORT(88, void, png_set_read_user_chunk_fn, (png_structrp png_ptr,\n\
    \    png_voidp user_chunk_ptr, png_user_chunk_ptr read_user_chunk_fn));"
- "name": png_set_rows
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": row_pointers
    "type": unsigned char
  "return_type": void
  "signature": "/* Set row_pointers, which is an array of pointers to scanlines for\
    \ use\n * by png_write_png().\n */\nPNG_EXPORT(113, void, png_set_rows, (png_const_structrp\
    \ png_ptr,\n    png_inforp info_ptr, png_bytepp row_pointers));"
- "name": png_set_compression_buffer_size
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": size
    "type": unsigned long
  "return_type": void
  "signature": "\nPNG_EXPORT(7, void, png_set_compression_buffer_size, (png_structrp\
    \ png_ptr,\n    size_t size));"
- "name": png_set_invalid
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": mask
    "type": int
  "return_type": void
  "signature": "/* Png_free_data() will turn off the \"valid\" flag for anything it\
    \ frees.\n * If you need to turn it off for a chunk that your application has\
    \ freed,\n * you can use png_set_invalid(png_ptr, info_ptr, PNG_INFO_CHNK);\n\
    \ */\nPNG_EXPORT(177, void, png_set_invalid, (png_const_structrp png_ptr,\n  \
    \  png_inforp info_ptr, int mask));"
- "name": png_set_user_limits
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": user_width_max
    "type": unsigned int
  - "name": user_height_max
    "type": unsigned int
  "return_type": void
  "signature": "\nPNG_EXPORT(186, void, png_set_user_limits, (png_structrp png_ptr,\n\
    \    png_uint_32 user_width_max, png_uint_32 user_height_max));"
- "name": png_set_chunk_cache_max
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": user_chunk_cache_max
    "type": unsigned int
  "return_type": void
  "signature": "/* Added in libpng-1.4.0 */\nPNG_EXPORT(189, void, png_set_chunk_cache_max,\
    \ (png_structrp png_ptr,\n    png_uint_32 user_chunk_cache_max));"
- "name": png_set_chunk_malloc_max
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": user_chunk_malloc_max
    "type": unsigned long
  "return_type": void
  "signature": "/* Added in libpng-1.4.1 */\nPNG_EXPORT(191, void, png_set_chunk_malloc_max,\
    \ (png_structrp png_ptr,\n    png_alloc_size_t user_chunk_cache_max));"
- "name": png_set_benign_errors
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": allowed
    "type": int
  "return_type": void
  "signature": "\nPNG_EXPORT(109, void, png_set_benign_errors,\n    (png_structrp\
    \ png_ptr, int allowed));"
- "name": png_set_check_for_invalid_index
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": allowed
    "type": int
  "return_type": void
  "signature": "\nPNG_EXPORT(242, void, png_set_check_for_invalid_index,\n    (png_structrp\
    \ png_ptr, int allowed));"
- "name": png_set_cLLI
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": maxCLL
    "type": double
  - "name": maxFALL
    "type": double
  "return_type": void
  "signature": "\nPNG_FP_EXPORT(254, void, png_set_cLLI, (png_const_structrp png_ptr,\n\
    \         png_inforp info_ptr, double maximum_content_light_level,\n         double\
    \ maximum_frame_average_light_level))\nPNG_FIXED_EXPORT(255, void, png_set_cLLI_fixed,\
    \ (png_const_structrp png_ptr,\n    png_inforp info_ptr,\n    /* The values below\
    \ are in cd/m2 (nits) and are scaled by 10,000;"
- "name": png_set_mDCV_fixed
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": white_x
    "type": int
  - "name": white_y
    "type": int
  - "name": red_x
    "type": int
  - "name": red_y
    "type": int
  - "name": green_x
    "type": int
  - "name": green_y
    "type": int
  - "name": blue_x
    "type": int
  - "name": blue_y
    "type": int
  - "name": maxDL
    "type": unsigned int
  - "name": minDL
    "type": unsigned int
  "return_type": void
  "signature": "\nPNG_FIXED_EXPORT(259, void, png_set_mDCV_fixed, (png_const_structrp\
    \ png_ptr,\n    png_inforp info_ptr,\n    /* The admissible range of these values\
    \ is not the full range of a PNG\n     * fixed point value.  Negative values cannot\
    \ be encoded and the maximum\n     * value is about 1.3 */\n    png_fixed_point\
    \ int_white_x, png_fixed_point int_white_y,\n    png_fixed_point int_red_x, png_fixed_point\
    \ int_red_y,\n    png_fixed_point int_green_x, png_fixed_point int_green_y,\n\
    \    png_fixed_point int_blue_x, png_fixed_point int_blue_y,\n    /* These are\
    \ PNG unsigned 4 byte values: 31-bit unsigned values.  The MSB\n     * must be\
    \ zero.\n     */\n    png_uint_32 mastering_display_maximum_luminance_scaled_by_10000,\n\
    \    png_uint_32 mastering_display_minimum_luminance_scaled_by_10000))\n#endif\n\
    \n#ifdef PNG_oFFs_SUPPORTED\nPNG_EXPORT(145, png_uint_32, png_get_oFFs, (png_const_structrp\
    \ png_ptr,\n   png_const_inforp info_ptr, png_int_32 *offset_x, png_int_32 *offset_y,\n\
    \   int *unit_type));"
- "name": png_set_bKGD
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": background
    "type": struct png_color_16_struct
  "return_type": void
  "signature": "\nPNG_EXPORT(132, void, png_set_bKGD, (png_const_structrp png_ptr,\n\
    \    png_inforp info_ptr, png_const_color_16p background));"
- "name": png_set_mDCV
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": white_x
    "type": double
  - "name": white_y
    "type": double
  - "name": red_x
    "type": double
  - "name": red_y
    "type": double
  - "name": green_x
    "type": double
  - "name": green_y
    "type": double
  - "name": blue_x
    "type": double
  - "name": blue_y
    "type": double
  - "name": maxDL
    "type": double
  - "name": minDL
    "type": double
  "return_type": void
  "signature": "\nPNG_FP_EXPORT(258, void, png_set_mDCV, (png_const_structrp png_ptr,\n\
    \    png_inforp info_ptr,\n    /* The chromaticities of the mastering display.\
    \  As cHRM, but independent of\n     * the encoding endpoints in cHRM, or cICP,\
    \ or iCCP.\n     */\n    double white_x, double white_y, double red_x, double\
    \ red_y, double green_x,\n    double green_y, double blue_x, double blue_y,\n\
    \    /* Mastering display luminance in cd/m2 (nits). */\n    double mastering_display_maximum_luminance,\n\
    \    double mastering_display_minimum_luminance))\n\nPNG_FIXED_EXPORT(259, void,\
    \ png_set_mDCV_fixed, (png_const_structrp png_ptr,\n    png_inforp info_ptr,\n\
    \    /* The admissible range of these values is not the full range of a PNG\n\
    \     * fixed point value.  Negative values cannot be encoded and the maximum\n\
    \     * value is about 1.3 */\n    png_fixed_point int_white_x, png_fixed_point\
    \ int_white_y,\n    png_fixed_point int_red_x, png_fixed_point int_red_y,\n  \
    \  png_fixed_point int_green_x, png_fixed_point int_green_y,\n    png_fixed_point\
    \ int_blue_x, png_fixed_point int_blue_y,\n    /* These are PNG unsigned 4 byte\
    \ values: 31-bit unsigned values.  The MSB\n     * must be zero.\n     */\n  \
    \  png_uint_32 mastering_display_maximum_luminance_scaled_by_10000,\n    png_uint_32\
    \ mastering_display_minimum_luminance_scaled_by_10000))\n#endif\n\n#ifdef PNG_oFFs_SUPPORTED\n\
    PNG_EXPORT(145, png_uint_32, png_get_oFFs, (png_const_structrp png_ptr,\n   png_const_inforp\
    \ info_ptr, png_int_32 *offset_x, png_int_32 *offset_y,\n   int *unit_type));"
- "name": png_set_eXIf
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": exif
    "type": unsigned char
  "return_type": void
  "signature": "\nPNG_EXPORT(247, void, png_set_eXIf, (png_const_structrp png_ptr,\n\
    \    png_inforp info_ptr, png_bytep exif));"
- "name": png_set_eXIf_1
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": num_exif
    "type": unsigned int
  - "name": exif
    "type": unsigned char
  "return_type": void
  "signature": "\nPNG_EXPORT(249, void, png_set_eXIf_1, (png_const_structrp png_ptr,\n\
    \    png_inforp info_ptr, png_uint_32 num_exif, png_bytep exif));"
- "name": png_set_gAMA_fixed
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": file_gamma
    "type": int
  "return_type": void
  "signature": "\nPNG_FIXED_EXPORT(140, void, png_set_gAMA_fixed, (png_const_structrp\
    \ png_ptr,\n    png_inforp info_ptr, png_fixed_point int_file_gamma))\n#endif\n\
    \n#ifdef PNG_hIST_SUPPORTED\nPNG_EXPORT(141, png_uint_32, png_get_hIST, (png_const_structrp\
    \ png_ptr,\n    png_inforp info_ptr, png_uint_16p *hist));"
- "name": png_set_gAMA
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": file_gamma
    "type": double
  "return_type": void
  "signature": "\nPNG_FP_EXPORT(139, void, png_set_gAMA, (png_const_structrp png_ptr,\n\
    \    png_inforp info_ptr, double file_gamma))\nPNG_FIXED_EXPORT(140, void, png_set_gAMA_fixed,\
    \ (png_const_structrp png_ptr,\n    png_inforp info_ptr, png_fixed_point int_file_gamma))\n\
    #endif\n\n#ifdef PNG_hIST_SUPPORTED\nPNG_EXPORT(141, png_uint_32, png_get_hIST,\
    \ (png_const_structrp png_ptr,\n    png_inforp info_ptr, png_uint_16p *hist));"
- "name": png_set_hIST
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": hist
    "type": unsigned short
  "return_type": void
  "signature": "\nPNG_EXPORT(142, void, png_set_hIST, (png_const_structrp png_ptr,\n\
    \    png_inforp info_ptr, png_const_uint_16p hist));"
- "name": png_set_cHRM_fixed
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": white_x
    "type": int
  - "name": white_y
    "type": int
  - "name": red_x
    "type": int
  - "name": red_y
    "type": int
  - "name": green_x
    "type": int
  - "name": green_y
    "type": int
  - "name": blue_x
    "type": int
  - "name": blue_y
    "type": int
  "return_type": void
  "signature": "\nPNG_FIXED_EXPORT(136, void, png_set_cHRM_fixed, (png_const_structrp\
    \ png_ptr,\n    png_inforp info_ptr, png_fixed_point int_white_x,\n    png_fixed_point\
    \ int_white_y, png_fixed_point int_red_x,\n    png_fixed_point int_red_y, png_fixed_point\
    \ int_green_x,\n    png_fixed_point int_green_y, png_fixed_point int_blue_x,\n\
    \    png_fixed_point int_blue_y))\nPNG_FIXED_EXPORT(233, void, png_set_cHRM_XYZ_fixed,\
    \ (png_const_structrp png_ptr,\n    png_inforp info_ptr, png_fixed_point int_red_X,\
    \ png_fixed_point int_red_Y,\n    png_fixed_point int_red_Z, png_fixed_point int_green_X,\n\
    \    png_fixed_point int_green_Y, png_fixed_point int_green_Z,\n    png_fixed_point\
    \ int_blue_X, png_fixed_point int_blue_Y,\n    png_fixed_point int_blue_Z))\n\
    #endif\n\n#ifdef PNG_cICP_SUPPORTED\nPNG_EXPORT(250, png_uint_32, png_get_cICP,\
    \ (png_const_structrp png_ptr,\n    png_const_inforp info_ptr, png_bytep colour_primaries,\n\
    \    png_bytep transfer_function, png_bytep matrix_coefficients,\n    png_bytep\
    \ video_full_range_flag));"
- "name": png_set_IHDR
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": width
    "type": unsigned int
  - "name": height
    "type": unsigned int
  - "name": bit_depth
    "type": int
  - "name": color_type
    "type": int
  - "name": interlace_type
    "type": int
  - "name": compression_type
    "type": int
  - "name": filter_type
    "type": int
  "return_type": void
  "signature": "\nPNG_EXPORT(144, void, png_set_IHDR, (png_const_structrp png_ptr,\n\
    \    png_inforp info_ptr, png_uint_32 width, png_uint_32 height, int bit_depth,\n\
    \    int color_type, int interlace_method, int compression_method,\n    int filter_method));"
- "name": png_set_oFFs
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": offset_x
    "type": int
  - "name": offset_y
    "type": int
  - "name": unit_type
    "type": int
  "return_type": void
  "signature": "\nPNG_EXPORT(146, void, png_set_oFFs, (png_const_structrp png_ptr,\n\
    \    png_inforp info_ptr, png_int_32 offset_x, png_int_32 offset_y,\n    int unit_type));"
- "name": png_set_pCAL
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": purpose
    "type": char
  - "name": X0
    "type": int
  - "name": X1
    "type": int
  - "name": type
    "type": int
  - "name": nparams
    "type": int
  - "name": units
    "type": char
  - "name": params
    "type": char
  "return_type": void
  "signature": "\nPNG_EXPORT(148, void, png_set_pCAL, (png_const_structrp png_ptr,\n\
    \    png_inforp info_ptr, png_const_charp purpose, png_int_32 X0, png_int_32 X1,\n\
    \    int type, int nparams, png_const_charp units, png_charpp params));"
- "name": png_set_sCAL_s
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": unit
    "type": int
  - "name": swidth
    "type": char
  - "name": sheight
    "type": char
  "return_type": void
  "signature": "\nPNG_EXPORT(171, void, png_set_sCAL_s, (png_const_structrp png_ptr,\n\
    \    png_inforp info_ptr, int unit,\n    png_const_charp swidth, png_const_charp\
    \ sheight));"
- "name": png_set_cHRM_XYZ_fixed
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": int_red_X
    "type": int
  - "name": int_red_Y
    "type": int
  - "name": int_red_Z
    "type": int
  - "name": int_green_X
    "type": int
  - "name": int_green_Y
    "type": int
  - "name": int_green_Z
    "type": int
  - "name": int_blue_X
    "type": int
  - "name": int_blue_Y
    "type": int
  - "name": int_blue_Z
    "type": int
  "return_type": void
  "signature": "\nPNG_FIXED_EXPORT(233, void, png_set_cHRM_XYZ_fixed, (png_const_structrp\
    \ png_ptr,\n    png_inforp info_ptr, png_fixed_point int_red_X, png_fixed_point\
    \ int_red_Y,\n    png_fixed_point int_red_Z, png_fixed_point int_green_X,\n  \
    \  png_fixed_point int_green_Y, png_fixed_point int_green_Z,\n    png_fixed_point\
    \ int_blue_X, png_fixed_point int_blue_Y,\n    png_fixed_point int_blue_Z))\n\
    #endif\n\n#ifdef PNG_cICP_SUPPORTED\nPNG_EXPORT(250, png_uint_32, png_get_cICP,\
    \ (png_const_structrp png_ptr,\n    png_const_inforp info_ptr, png_bytep colour_primaries,\n\
    \    png_bytep transfer_function, png_bytep matrix_coefficients,\n    png_bytep\
    \ video_full_range_flag));"
- "name": png_set_sCAL
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": unit
    "type": int
  - "name": width
    "type": double
  - "name": height
    "type": double
  "return_type": void
  "signature": "\nPNG_FP_EXPORT(170, void, png_set_sCAL, (png_const_structrp png_ptr,\n\
    \    png_inforp info_ptr, int unit, double width, double height))\nPNG_FIXED_EXPORT(213,\
    \ void, png_set_sCAL_fixed, (png_const_structrp png_ptr,\n   png_inforp info_ptr,\
    \ int unit, png_fixed_point width,\n   png_fixed_point height))\nPNG_EXPORT(171,\
    \ void, png_set_sCAL_s, (png_const_structrp png_ptr,\n    png_inforp info_ptr,\
    \ int unit,\n    png_const_charp swidth, png_const_charp sheight));"
- "name": png_set_sCAL_fixed
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": unit
    "type": int
  - "name": width
    "type": int
  - "name": height
    "type": int
  "return_type": void
  "signature": "\nPNG_FIXED_EXPORT(213, void, png_set_sCAL_fixed, (png_const_structrp\
    \ png_ptr,\n   png_inforp info_ptr, int unit, png_fixed_point width,\n   png_fixed_point\
    \ height))\nPNG_EXPORT(171, void, png_set_sCAL_s, (png_const_structrp png_ptr,\n\
    \    png_inforp info_ptr, int unit,\n    png_const_charp swidth, png_const_charp\
    \ sheight));"
- "name": png_set_pHYs
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": res_x
    "type": unsigned int
  - "name": res_y
    "type": unsigned int
  - "name": unit_type
    "type": int
  "return_type": void
  "signature": "\nPNG_EXPORT(150, void, png_set_pHYs, (png_const_structrp png_ptr,\n\
    \    png_inforp info_ptr, png_uint_32 res_x, png_uint_32 res_y, int unit_type));"
- "name": png_set_PLTE
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": palette
    "type": struct png_color_struct
  - "name": num_palette
    "type": int
  "return_type": void
  "signature": "\nPNG_EXPORT(152, void, png_set_PLTE, (png_structrp png_ptr,\n   \
    \ png_inforp info_ptr, png_const_colorp palette, int num_palette));"
- "name": png_set_sBIT
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": sig_bit
    "type": struct png_color_8_struct
  "return_type": void
  "signature": "\nPNG_EXPORT(154, void, png_set_sBIT, (png_const_structrp png_ptr,\n\
    \    png_inforp info_ptr, png_const_color_8p sig_bit));"
- "name": png_set_sRGB
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": srgb_intent
    "type": int
  "return_type": void
  "signature": "\nPNG_EXPORT(156, void, png_set_sRGB, (png_const_structrp png_ptr,\n\
    \    png_inforp info_ptr, int srgb_intent));"
- "name": png_set_sRGB_gAMA_and_cHRM
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": srgb_intent
    "type": int
  "return_type": void
  "signature": "\nPNG_EXPORT(157, void, png_set_sRGB_gAMA_and_cHRM, (png_const_structrp\
    \ png_ptr,\n    png_inforp info_ptr, int srgb_intent));"
- "name": png_set_iCCP
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": name
    "type": char
  - "name": compression_type
    "type": int
  - "name": profile
    "type": unsigned char
  - "name": proflen
    "type": unsigned int
  "return_type": void
  "signature": "\nPNG_EXPORT(159, void, png_set_iCCP, (png_const_structrp png_ptr,\n\
    \    png_inforp info_ptr, png_const_charp name, int compression_type,\n    png_const_bytep\
    \ profile, png_uint_32 proflen));"
- "name": png_set_text
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": text_ptr
    "type": struct png_text_struct
  - "name": num_text
    "type": int
  "return_type": void
  "signature": "\nPNG_EXPORT(163, void, png_set_text, (png_const_structrp png_ptr,\n\
    \    png_inforp info_ptr, png_const_textp text_ptr, int num_text));"
- "name": png_set_cHRM
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": info_ptr
    "type": struct png_info_def
  - "name": white_x
    "type": double
  - "name": white_y
    "type": double
  - "name": red_x
    "type": double
  - "name": red_y
    "type": double
  - "name": green_x
    "type": double
  - "name": green_y
    "type": double
  - "name": blue_x
    "type": double
  - "name": blue_y
    "type": double
  "return_type": void
  "signature": "\nPNG_FP_EXPORT(135, void, png_set_cHRM, (png_const_structrp png_ptr,\n\
    \    png_inforp info_ptr,\n    double white_x, double white_y, double red_x, double\
    \ red_y, double green_x,\n    double green_y, double blue_x, double blue_y))\n\
    PNG_FP_EXPORT(232, void, png_set_cHRM_XYZ, (png_const_structrp png_ptr,\n    png_inforp\
    \ info_ptr, double red_X, double red_Y, double red_Z,\n    double green_X, double\
    \ green_Y, double green_Z, double blue_X,\n    double blue_Y, double blue_Z))\n\
    PNG_FIXED_EXPORT(136, void, png_set_cHRM_fixed, (png_const_structrp png_ptr,\n\
    \    png_inforp info_ptr, png_fixed_point int_white_x,\n    png_fixed_point int_white_y,\
    \ png_fixed_point int_red_x,\n    png_fixed_point int_red_y, png_fixed_point int_green_x,\n\
    \    png_fixed_point int_green_y, png_fixed_point int_blue_x,\n    png_fixed_point\
    \ int_blue_y))\nPNG_FIXED_EXPORT(233, void, png_set_cHRM_XYZ_fixed, (png_const_structrp\
    \ png_ptr,\n    png_inforp info_ptr, png_fixed_point int_red_X, png_fixed_point\
    \ int_red_Y,\n    png_fixed_point int_red_Z, png_fixed_point int_green_X,\n  \
    \  png_fixed_point int_green_Y, png_fixed_point int_green_Z,\n    png_fixed_point\
    \ int_blue_X, png_fixed_point int_blue_Y,\n    png_fixed_point int_blue_Z))\n\
    #endif\n\n#ifdef PNG_cICP_SUPPORTED\nPNG_EXPORT(250, png_uint_32, png_get_cICP,\
    \ (png_const_structrp png_ptr,\n    png_const_inforp info_ptr, png_bytep colour_primaries,\n\
    \    png_bytep transfer_function, png_bytep matrix_coefficients,\n    png_bytep\
    \ video_full_range_flag));"
- "name": png_get_uint_31
  "params":
  - "name": png_ptr
    "type": struct png_struct_def
  - "name": buf
    "type": unsigned char
  "return_type": unsigned int
  "signature": "\nPNG_EXPORT(204, png_uint_32, png_get_uint_31, (png_const_structrp\
    \ png_ptr,\n    png_const_bytep buf));"
- "name": png_get_uint_32
  "params":
  - "name": buf
    "type": unsigned char
  "return_type": unsigned int
  "signature": '

    PNG_EXPORT(201, png_uint_32, png_get_uint_32, (png_const_bytep buf));'
- "name": png_get_int_32
  "params":
  - "name": buf
    "type": unsigned char
  "return_type": int
  "signature": '

    PNG_EXPORT(203, png_int_32, png_get_int_32, (png_const_bytep buf));'
- "name": png_get_uint_16
  "params":
  - "name": buf
    "type": unsigned char
  "return_type": unsigned short
  "signature": '

    PNG_EXPORT(202, png_uint_16, png_get_uint_16, (png_const_bytep buf));'
"language": "c++"
"project": "libpng"
"target_name": "libpng_read_fuzzer"
"target_path": "/src/libpng/contrib/oss-fuzz/libpng_read_fuzzer.cc"
